{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthModel",
            "id": "interface-AuthModel-3f6e0743a19064df28015d83575742cd",
            "file": "projects/ambulance/src/app/core/domain/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface AuthModel {\r\n  correo: string;\r\n  password: string;\r\n  recaptchaReactive: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "recaptchaReactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "ConfigLayout",
            "id": "interface-ConfigLayout-5d9cd3eeb43d65d81ecdc1063f398e14",
            "file": "projects/ambulance/src/app/config/interfaces/config-layout.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConfigLayout {\r\n  header: {\r\n    hidden: boolean;\r\n  };\r\n  menu: {\r\n    hidden: boolean;\r\n  };\r\n}\r\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "DriverModel",
            "id": "interface-DriverModel-324f7c5cadba28092abf99ed4739c66f",
            "file": "projects/ambulance/src/app/drivers/domain/driver.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DriverModel {\r\n  id: number;\r\n  nombre: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "DtoExport",
            "id": "interface-DtoExport-7724da5be14ee40a54b7d564f01dc736",
            "file": "projects/ambulance/src/app/shared/interfaces/dto-export.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface DtoExport<T, U> {\r\n  mapping(data: T[]): U[];\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "mapping",
                    "args": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "U[]",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        {
            "name": "HistoryModel",
            "id": "interface-HistoryModel-5808d330b1aecd8eb1914891325c2e97",
            "file": "projects/ambulance/src/app/histories/domain/history.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface HistoryModel {\r\n  id: number;\r\n  contratante: string;\r\n  requerido: string;\r\n  poliza: string;\r\n  dni: string;\r\n  nombre: string;\r\n  apellido: string;\r\n  telefono: string;\r\n  edad: number;\r\n  sexo: number;\r\n  diagnostico: string;\r\n  sintomas: string;\r\n  tratamiento: string;\r\n  activo: boolean;\r\n  medico: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "contratante",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "diagnostico",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "edad",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "medico",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "poliza",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "requerido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "sexo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "sintomas",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "telefono",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tratamiento",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IData",
            "id": "interface-IData-4a3323b7f62308c7db1661d05e831469",
            "file": "projects/ambulance/src/app/shared/components/table/table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  Input,\r\n  OnInit,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatColumnDef, MatTable } from '@angular/material/table';\r\nimport { MetaDataColumn } from '../../interfaces/metacolumn.interface';\r\n\r\ninterface IData {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'amb-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.css'],\r\n})\r\nexport class TableComponent implements OnInit {\r\n  @Input() data: any;\r\n  @Input() metaDataColumns!: MetaDataColumn[];\r\n  listFields: string[] = [];\r\n  @ContentChildren(MatColumnDef, { descendants: true })\r\n  columnsDef!: QueryList<MatColumnDef>;\r\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>;\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.metaDataColumns) {\r\n      this.listFields = this.metaDataColumns.map((x) => x.field);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this.columnsDef) {\r\n      return;\r\n    }\r\n    this.columnsDef.forEach((columnDef) => {\r\n      this.listFields.push(columnDef.name);\r\n      this.table?.addColumnDef(columnDef);\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDtoExportDriver",
            "id": "interface-IDtoExportDriver-bba45a10738c71da4023ff8231239f02",
            "file": "projects/ambulance/src/app/drivers/dtos/driver-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\r\nimport { DriverModel } from '../domain/driver.model';\r\n\r\nexport interface IDtoExportDriver {\r\n  'Nombre del piloto': string;\r\n}\r\n\r\nexport class DriverExportDto\r\n  implements DtoExport<DriverModel, IDtoExportDriver>\r\n{\r\n  mapping(data: DriverModel[]): IDtoExportDriver[] {\r\n    return data.map((driver: DriverModel) => ({\r\n      'Nombre del piloto': driver.nombre,\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "Nombre del piloto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDtoExportMedic",
            "id": "interface-IDtoExportMedic-cdaa23746c95e6d581f0965ca1d895dd",
            "file": "projects/ambulance/src/app/medics/dtos/medic-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\r\nimport { MedicModel } from '../domain/medic.model';\r\n\r\nexport interface IDtoExportMedic {\r\n  'Nombre del usuario': string;\r\n  'Correo electrónico': string;\r\n}\r\n\r\nexport class MedicExportDto implements DtoExport<MedicModel, IDtoExportMedic> {\r\n  mapping(data: MedicModel[]): IDtoExportMedic[] {\r\n    return data.map((medic: MedicModel) => ({\r\n      'Nombre del usuario': medic.nombre,\r\n      'Correo electrónico': medic.correo,\r\n      CMP: medic.cmp,\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "Correo electrónico",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Nombre del usuario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IDtoExportUser",
            "id": "interface-IDtoExportUser-a5b3e628719bc705a4631b8c573f76f1",
            "file": "projects/ambulance/src/app/users/dtos/user-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\r\nimport { UserModel } from '../domain/user.model';\r\n\r\nexport interface IDtoExportUser {\r\n  'Nombre del usuario': string;\r\n  'Correo electrónico': string;\r\n}\r\n\r\nexport class UserExportDto implements DtoExport<UserModel, IDtoExportUser> {\r\n  mapping(data: UserModel[]): IDtoExportUser[] {\r\n    return data.map((user: UserModel) => ({\r\n      'Nombre del usuario': user.nombre,\r\n      'Correo electrónico': user.correo,\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "Correo electrónico",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "Nombre del usuario",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IIcon",
            "id": "interface-IIcon-9bad365c1486c6c42040ed491fcc2da9",
            "file": "projects/ambulance/src/app/helpers/services/icon.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ninterface IIcon {\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IconService {\r\n  private listIcons: IIcon[] = [\r\n    { name: 'logo', path: '../assets/icons/ambulancia.svg' },\r\n    { name: 'medico', path: '../assets/icons/medico.svg' },\r\n    { name: 'enfermero', path: '../assets/icons/enfermero.svg' },\r\n    { name: 'historia', path: '../assets/icons/historia.svg' },\r\n    { name: 'piloto', path: '../assets/icons/conductor.svg' },\r\n    { name: 'usuario', path: '../assets/icons/programador.svg' },\r\n    { name: 'reporte', path: '../assets/icons/reporte.svg' },\r\n    { name: 'tarifa', path: '../assets/icons/tarifa.svg' },\r\n    { name: 'tablero', path: '../assets/icons/tablero.svg' },\r\n    { name: 'monitoreo', path: '../assets/icons/monitoreo.svg' },\r\n  ];\r\n\r\n  constructor(\r\n    private matIconRegistry: MatIconRegistry,\r\n    private domSanitizer: DomSanitizer\r\n  ) {\r\n    this.registryIcons();\r\n  }\r\n\r\n  registryIcons() {\r\n    this.listIcons.forEach((icon) => {\r\n      this.matIconRegistry.addSvgIcon(\r\n        icon.name,\r\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path)\r\n      );\r\n    });\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IMenu",
            "id": "interface-IMenu-5fe79a560546102c16456a342aec19b2",
            "file": "projects/ambulance/src/app/helpers/services/menu.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport interface IMenu {\r\n  title: string;\r\n  url: string;\r\n  icon: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n  private listMenu: IMenu[] = [\r\n    { title: 'Dashboard', url: '/dashboard', icon: 'tablero' },\r\n    { title: 'Historias', url: '/histories', icon: 'historia' },\r\n    { title: 'Medicos', url: '/medics', icon: 'medico' },\r\n    { title: 'Pilotos', url: '/drivers', icon: 'piloto' },\r\n    { title: 'Usuarios', url: '/users', icon: 'usuario' },\r\n  ];\r\n  constructor() {}\r\n\r\n  getMenu(): IMenu[] {\r\n    return [...this.listMenu];\r\n  }\r\n\r\n  getMenuByUrl(url: string): IMenu {\r\n    return this.listMenu.find(\r\n      (menu) => menu.url.toLowerCase() === url.toLowerCase()\r\n    ) as IMenu;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "IPayload",
            "id": "interface-IPayload-1e1bfe177ba268c63c75f55a7b33a92f",
            "file": "projects/ambulance/src/app/core/infraestructure/storage.infraestructure.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { StorageRepository } from '../application/storage.repository';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\ninterface IPayload {\r\n  iat: number;\r\n  exp: number;\r\n  name: string;\r\n  email: string;\r\n  roles: string[];\r\n}\r\n\r\nexport class StorageInfraestructure extends StorageRepository {\r\n  setStorage(nameProperty: string, value: string): void {\r\n    sessionStorage.setItem(nameProperty, value);\r\n  }\r\n  getStorage(nameProperty: string): string | null {\r\n    return sessionStorage.getItem(nameProperty);\r\n  }\r\n  clear(): void {\r\n    sessionStorage.clear();\r\n  }\r\n  getFieldInToken(fieldName: string) {\r\n    const accessToken = this.getStorage('accessToken');\r\n\r\n    if (!accessToken) {\r\n      return null;\r\n    }\r\n    try {\r\n      const payload: any = jwt_decode(accessToken) as IPayload;\r\n      return payload[fieldName];\r\n    } catch (error) {}\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "exp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "KeyPadButton",
            "id": "interface-KeyPadButton-7b7c97792f01f38c79ca8918723bb238",
            "file": "projects/ambulance/src/app/shared/interfaces/keybutton.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface KeyPadButton {\r\n  icon: string;\r\n  color: string;\r\n  tooltip: string;\r\n  action: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "tooltip",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MedicModel",
            "id": "interface-MedicModel-2e892a012aed1ec3768e160683dde777",
            "file": "projects/ambulance/src/app/medics/domain/medic.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MedicModel {\r\n  id: number;\r\n  nombre: string;\r\n  segundo_nombre: string;\r\n  apellido: string;\r\n  cmp: string;\r\n  dni: string;\r\n  correo: string;\r\n  activo: boolean;\r\n  foto: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "apellido",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "cmp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "dni",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "foto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "segundo_nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MetaDataColumn",
            "id": "interface-MetaDataColumn-16127d73def181d0c65f73a211d5298f",
            "file": "projects/cdev-table/src/lib/metacolumn.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaDataColumn {\r\n  field: string;\r\n  title: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "MetaDataColumn",
            "id": "interface-MetaDataColumn-16127d73def181d0c65f73a211d5298f-1",
            "file": "projects/ambulance/src/app/shared/interfaces/metacolumn.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MetaDataColumn {\r\n  field: string;\r\n  title: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "MetaDataColumn-1"
        },
        {
            "name": "OptionsExport",
            "id": "interface-OptionsExport-fa3596f03be3aa65500c40c75a405db1",
            "file": "projects/ambulance/src/app/shared/interfaces/option-export.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DtoExport } from './dto-export.interface';\r\n\r\nexport interface OptionsExport<T, U> {\r\n  title: string;\r\n  fileName: string;\r\n  content: T[];\r\n  dto: DtoExport<T, U>;\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "dto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DtoExport<T | U>",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Page",
            "id": "interface-Page-224db7f6a45b435c972987a105b1bc76",
            "file": "projects/ambulance/src/app/shared/interfaces/page.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Page<T> {\r\n  records: T[];\r\n  totalRecords: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "records",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "Tokens",
            "id": "interface-Tokens-8c57ca26a9c35936a4cce37f8ef5bcdd",
            "file": "projects/ambulance/src/app/helpers/interfaces/tokens.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Tokens {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        },
        {
            "name": "UseCase",
            "id": "interface-UseCase-807048e1283e8f9a9e8a228d66e9c0f6",
            "file": "projects/ambulance/src/app/shared/interfaces/usecase.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Page } from './page.interface';\r\n\r\nexport interface UseCase<T> {\r\n  getByPage(page: number): Observable<Page<T>>;\r\n  delete(id: number): Observable<T>;\r\n  list(): Observable<T[]>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "kind": 166,
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<T>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<T>>",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<T[]>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ]
        },
        {
            "name": "UserModel",
            "id": "interface-UserModel-f28405946c22f4149998e74180019cbb",
            "file": "projects/ambulance/src/app/users/domain/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserModel {\r\n  id: number;\r\n  nombre: string;\r\n  correo: string;\r\n  password: string;\r\n  refreshToken: string;\r\n  activo: boolean;\r\n  roles: any;\r\n}\r\n",
            "properties": [
                {
                    "name": "activo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "correo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "nombre",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 164,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthInfraestructure",
            "id": "injectable-AuthInfraestructure-c6a4ce7a1a508295981c1b881ba59c1a",
            "file": "projects/ambulance/src/app/core/infraestructure/auth.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AuthRepository"
                    }
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "AuthRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'projects/ambulance/src/environments/environment';\r\nimport { AuthRepository } from '../application/auth.repository';\r\nimport { AuthModel } from '../domain/auth.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Tokens } from '../../helpers/interfaces/tokens';\r\n\r\n@Injectable()\r\nexport class AuthInfraestructure extends AuthRepository {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n  login(auth: AuthModel): Observable<Tokens> {\r\n    return this.http.post<Tokens>(`${environment.API_URL}/users/login`, auth);\r\n  }\r\n\r\n  getNewAccessToken(refreshToken: string): Observable<Tokens> {\r\n    return this.http.get<Tokens>(\r\n      `${environment.API_URL}/users/refresh/${refreshToken}`\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "AuthRepository",
            "type": "injectable"
        },
        {
            "name": "AuthUseCase",
            "id": "injectable-AuthUseCase-1440b6780c2f27f425162ab6d1c38070",
            "file": "projects/ambulance/src/app/core/application/auth.usecase.ts",
            "properties": [
                {
                    "name": "userLogged",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getFieldValue",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthorized",
                    "args": [
                        {
                            "name": "rolesAllowed",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "rolesAllowed",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setFieldValue",
                    "args": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Tokens } from '../../helpers/interfaces/tokens';\r\nimport { AuthModel } from '../domain/auth.model';\r\nimport { AuthRepository } from './auth.repository';\r\nimport { StorageRepository } from './storage.repository';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthUseCase {\r\n  private userLogged = false;\r\n\r\n  constructor(\r\n    private repository: AuthRepository,\r\n    private router: Router,\r\n    private storage: StorageRepository\r\n  ) {}\r\n\r\n  login(auth: AuthModel) {\r\n    return this.repository.login(auth).subscribe((response: Tokens) => {\r\n      this.storage.setStorage('accessToken', response.accessToken);\r\n      this.storage.setStorage('refreshToken', response.refreshToken);\r\n      this.userLogged = true;\r\n      this.router.navigate(['/dashboard']);\r\n    });\r\n  }\r\n\r\n  logout(): Observable<any> {\r\n    this.storage.clear();\r\n    this.userLogged = false;\r\n    this.router.navigate(['/login']);\r\n    return of();\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    return this.userLogged || !!this.storage.getStorage('accessToken');\r\n  }\r\n\r\n  isAuthorized(rolesAllowed: string[]): boolean {\r\n    const rolesUser = this.storage.getFieldInToken('roles');\r\n\r\n    let hasRoleAllowed = false;\r\n    for (let ind = 0; ind < rolesAllowed.length; ind++) {\r\n      if (rolesUser.includes(rolesAllowed[ind])) {\r\n        hasRoleAllowed = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    return hasRoleAllowed;\r\n  }\r\n\r\n  get accessToken(): string {\r\n    return '' + this.storage.getStorage('accessToken');\r\n  }\r\n\r\n  getNewAccessToken(refreshToken: string): Observable<Tokens> {\r\n    return this.repository.getNewAccessToken(refreshToken);\r\n  }\r\n\r\n  getFieldValue(field: string): string {\r\n    return '' + this.storage.getStorage(field);\r\n  }\r\n\r\n  setFieldValue(field: string, value: string) {\r\n    this.storage.setStorage(field, value);\r\n  }\r\n\r\n  getRoles() {\r\n    return this.storage.getFieldInToken('roles');\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "repository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "repository",
                        "type": "AuthRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storage",
                        "type": "StorageRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "accessToken": {
                    "name": "accessToken",
                    "getSignature": {
                        "name": "accessToken",
                        "type": "string",
                        "returnType": "string",
                        "line": 54
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ConfigService",
            "id": "injectable-ConfigService-39614629ab128a698faaed21c6bd295b",
            "file": "projects/ambulance/src/app/config/services/config.service.ts",
            "properties": [
                {
                    "name": "configSubject",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<ConfigLayout>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { ConfigLayout } from '../interfaces/config-layout.interface';\r\nimport { CONFIG_TOKEN } from '../tokens';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ConfigService {\r\n  private configSubject: BehaviorSubject<ConfigLayout>;\r\n\r\n  constructor(@Inject(CONFIG_TOKEN) private config: ConfigLayout) {\r\n    this.configSubject = new BehaviorSubject<ConfigLayout>(config);\r\n  }\r\n\r\n  set configuration(value: any) {\r\n    let config = this.configSubject.getValue();\r\n    config = Object.assign(config, value);\r\n    this.configSubject.next(config);\r\n  }\r\n\r\n  get configuration(): Observable<ConfigLayout> {\r\n    return this.configSubject.asObservable();\r\n  }\r\n}\r\n\r\n/* const instancia = new ConfigService()\r\ninstancia.configuration = {}\r\n//instancia.settingConfig({})\r\nconst value = instancia.configuration\r\n//const value = instancia.gettingConfig() */\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ConfigLayout",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ConfigLayout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "configuration": {
                    "name": "configuration",
                    "setSignature": {
                        "name": "configuration",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 16,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "any",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "configuration",
                        "type": "",
                        "returnType": "Observable<ConfigLayout>",
                        "line": 22
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "DriverInfraestructure",
            "id": "injectable-DriverInfraestructure-6fc5ec42a7b5b29120ef3a4de74bf02a",
            "file": "projects/ambulance/src/app/drivers/infraestructure/driver.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<DriverModel>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverModel[]>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "DriverRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'projects/ambulance/src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { DriverRepository } from '../application/driver.repository';\r\nimport { DriverModel } from '../domain/driver.model';\r\n\r\n@Injectable()\r\nexport class DriverInfraestructure extends DriverRepository {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getByPage(page: number): Observable<Page<DriverModel>> {\r\n    return this.http.get<Page<DriverModel>>(\r\n      `${environment.API_URL}/drivers/page/${page}/${environment.PAGE_SIZE}`\r\n    );\r\n  }\r\n\r\n  insert(driver: Partial<DriverModel>): Observable<DriverModel> {\r\n    return this.http.post<DriverModel>(\r\n      `${environment.API_URL}/drivers`,\r\n      driver\r\n    );\r\n  }\r\n\r\n  delete(id: number): Observable<DriverModel> {\r\n    return this.http.delete<DriverModel>(\r\n      `${environment.API_URL}/drivers/${id}`\r\n    );\r\n  }\r\n\r\n  list(): Observable<DriverModel[]> {\r\n    return this.http.get<DriverModel[]>(`${environment.API_URL}/drivers`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "DriverRepository",
            "type": "injectable"
        },
        {
            "name": "DriverUseCase",
            "id": "injectable-DriverUseCase-1b833d78a188e019cd54969d84136875",
            "file": "projects/ambulance/src/app/drivers/application/driver.usecase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<DriverModel>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverModel[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { UseCase } from '../../shared/interfaces/usecase.interface';\r\nimport { DriverModel } from '../domain/driver.model';\r\nimport { DriverRepository } from './driver.repository';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DriverUseCase implements UseCase<DriverModel> {\r\n  constructor(private driver: DriverRepository) {}\r\n\r\n  getByPage(page: number): Observable<Page<DriverModel>> {\r\n    return this.driver.getByPage(page);\r\n  }\r\n\r\n  delete(id: number): Observable<DriverModel> {\r\n    return this.driver.delete(id);\r\n  }\r\n\r\n  list(): Observable<DriverModel[]> {\r\n    return this.driver.list();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "driver",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "driver",
                        "type": "DriverRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "IconService",
            "id": "injectable-IconService-9bad365c1486c6c42040ed491fcc2da9",
            "file": "projects/ambulance/src/app/helpers/services/icon.service.ts",
            "properties": [
                {
                    "name": "listIcons",
                    "defaultValue": "[\r\n    { name: 'logo', path: '../assets/icons/ambulancia.svg' },\r\n    { name: 'medico', path: '../assets/icons/medico.svg' },\r\n    { name: 'enfermero', path: '../assets/icons/enfermero.svg' },\r\n    { name: 'historia', path: '../assets/icons/historia.svg' },\r\n    { name: 'piloto', path: '../assets/icons/conductor.svg' },\r\n    { name: 'usuario', path: '../assets/icons/programador.svg' },\r\n    { name: 'reporte', path: '../assets/icons/reporte.svg' },\r\n    { name: 'tarifa', path: '../assets/icons/tarifa.svg' },\r\n    { name: 'tablero', path: '../assets/icons/tablero.svg' },\r\n    { name: 'monitoreo', path: '../assets/icons/monitoreo.svg' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IIcon[]",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "registryIcons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\ninterface IIcon {\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IconService {\r\n  private listIcons: IIcon[] = [\r\n    { name: 'logo', path: '../assets/icons/ambulancia.svg' },\r\n    { name: 'medico', path: '../assets/icons/medico.svg' },\r\n    { name: 'enfermero', path: '../assets/icons/enfermero.svg' },\r\n    { name: 'historia', path: '../assets/icons/historia.svg' },\r\n    { name: 'piloto', path: '../assets/icons/conductor.svg' },\r\n    { name: 'usuario', path: '../assets/icons/programador.svg' },\r\n    { name: 'reporte', path: '../assets/icons/reporte.svg' },\r\n    { name: 'tarifa', path: '../assets/icons/tarifa.svg' },\r\n    { name: 'tablero', path: '../assets/icons/tablero.svg' },\r\n    { name: 'monitoreo', path: '../assets/icons/monitoreo.svg' },\r\n  ];\r\n\r\n  constructor(\r\n    private matIconRegistry: MatIconRegistry,\r\n    private domSanitizer: DomSanitizer\r\n  ) {\r\n    this.registryIcons();\r\n  }\r\n\r\n  registryIcons() {\r\n    this.listIcons.forEach((icon) => {\r\n      this.matIconRegistry.addSvgIcon(\r\n        icon.name,\r\n        this.domSanitizer.bypassSecurityTrustResourceUrl(icon.path)\r\n      );\r\n    });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "matIconRegistry",
                        "type": "MatIconRegistry",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "domSanitizer",
                        "type": "DomSanitizer",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MedicInfraestructure",
            "id": "injectable-MedicInfraestructure-594fe6f00635d367a75d213ffda17f61",
            "file": "projects/ambulance/src/app/medics/infraestructure/medic.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<MedicModel>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MedicModel[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "MedicRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'projects/ambulance/src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { MedicRepository } from '../application/medic.repostiory';\r\nimport { MedicModel } from '../domain/medic.model';\r\n\r\n@Injectable()\r\nexport class MedicInfraestructure extends MedicRepository {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getByPage(page: number): Observable<Page<MedicModel>> {\r\n    return this.http.get<Page<MedicModel>>(\r\n      `${environment.API_URL}/medics/page/${page}/${environment.PAGE_SIZE}`\r\n    );\r\n  }\r\n\r\n  insert(medic: Partial<MedicModel>): Observable<MedicModel> {\r\n    return this.http.post<MedicModel>(`${environment.API_URL}/medics`, medic);\r\n  }\r\n\r\n  delete(id: number): Observable<MedicModel> {\r\n    return this.http.delete<MedicModel>(`${environment.API_URL}/medics/${id}`);\r\n  }\r\n\r\n  list(): Observable<MedicModel[]> {\r\n    return this.http.get<MedicModel[]>(`${environment.API_URL}/medics`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "MedicRepository",
            "type": "injectable"
        },
        {
            "name": "MedicUseCase",
            "id": "injectable-MedicUseCase-cf9e65052014472a563eec07f9704700",
            "file": "projects/ambulance/src/app/medics/application/medic.usecase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<MedicModel>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MedicRepository } from './medic.repostiory';\r\nimport { MedicModel } from '../domain/medic.model';\r\nimport { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { UseCase } from '../../shared/interfaces/usecase.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MedicUseCase implements UseCase<MedicModel> {\r\n  constructor(private medic: MedicRepository) {}\r\n\r\n  getByPage(page: number): Observable<Page<MedicModel>> {\r\n    return this.medic.getByPage(page);\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.medic.delete(id);\r\n  }\r\n\r\n  list() {\r\n    return this.medic.list();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medic",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "medic",
                        "type": "MedicRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MenuService",
            "id": "injectable-MenuService-5fe79a560546102c16456a342aec19b2",
            "file": "projects/ambulance/src/app/helpers/services/menu.service.ts",
            "properties": [
                {
                    "name": "listMenu",
                    "defaultValue": "[\r\n    { title: 'Dashboard', url: '/dashboard', icon: 'tablero' },\r\n    { title: 'Historias', url: '/histories', icon: 'historia' },\r\n    { title: 'Medicos', url: '/medics', icon: 'medico' },\r\n    { title: 'Pilotos', url: '/drivers', icon: 'piloto' },\r\n    { title: 'Usuarios', url: '/users', icon: 'usuario' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "IMenu[]",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMenuByUrl",
                    "args": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IMenu",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "url",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nexport interface IMenu {\r\n  title: string;\r\n  url: string;\r\n  icon: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MenuService {\r\n  private listMenu: IMenu[] = [\r\n    { title: 'Dashboard', url: '/dashboard', icon: 'tablero' },\r\n    { title: 'Historias', url: '/histories', icon: 'historia' },\r\n    { title: 'Medicos', url: '/medics', icon: 'medico' },\r\n    { title: 'Pilotos', url: '/drivers', icon: 'piloto' },\r\n    { title: 'Usuarios', url: '/users', icon: 'usuario' },\r\n  ];\r\n  constructor() {}\r\n\r\n  getMenu(): IMenu[] {\r\n    return [...this.listMenu];\r\n  }\r\n\r\n  getMenuByUrl(url: string): IMenu {\r\n    return this.listMenu.find(\r\n      (menu) => menu.url.toLowerCase() === url.toLowerCase()\r\n    ) as IMenu;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "type": "injectable"
        },
        {
            "name": "Paginator",
            "id": "injectable-Paginator-679a286f7bb100a5565a26af57fe32c0",
            "file": "projects/ambulance/src/app/shared/classes/paginator.ts",
            "properties": [
                {
                    "name": "firstPageLabel",
                    "defaultValue": "'Primera página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "getRangeLabel",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "itemsPerPageLabel",
                    "defaultValue": "'Items por página:'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastPageLabel",
                    "defaultValue": "'Última página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nextPageLabel",
                    "defaultValue": "'Siguiente página'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "previousPageLabel",
                    "defaultValue": "'Página anterior'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatPaginatorIntl } from '@angular/material/paginator';\r\n\r\n@Injectable()\r\nexport class Paginator extends MatPaginatorIntl {\r\n  itemsPerPageLabel = 'Items por página:';\r\n  nextPageLabel = 'Siguiente página';\r\n  previousPageLabel = 'Página anterior';\r\n  firstPageLabel = 'Primera página';\r\n  lastPageLabel = 'Última página';\r\n\r\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\r\n    if (length === 0 || pageSize === 0) {\r\n      return `0 de ${length}`;\r\n    }\r\n    length = Math.max(length, 0);\r\n    const startIndex = page * pageSize;\r\n    const endIndex =\r\n      startIndex < length\r\n        ? Math.min(startIndex + pageSize, length)\r\n        : startIndex + pageSize;\r\n    return `${startIndex + 1} - ${endIndex} de ${length}`;\r\n  };\r\n}\r\n",
            "extends": "MatPaginatorIntl",
            "type": "injectable"
        },
        {
            "name": "UserInfraestructure",
            "id": "injectable-UserInfraestructure-a9e41a8b860e06e932a1641b3c62cc2d",
            "file": "projects/ambulance/src/app/users/infraestructure/user.infraestructure.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UserRepository"
                    }
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<UserModel>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UserRepository"
                    }
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "UserRepository"
                    }
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserModel[]>",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "UserRepository"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'projects/ambulance/src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { UserRepository } from '../application/user.repository';\r\nimport { UserModel } from '../domain/user.model';\r\n\r\n@Injectable()\r\nexport class UserInfraestructure extends UserRepository {\r\n  constructor(private http: HttpClient) {\r\n    super();\r\n  }\r\n\r\n  getByPage(page: number): Observable<Page<UserModel>> {\r\n    return this.http.get<Page<UserModel>>(\r\n      `${environment.API_URL}/users/page/${page}/${environment.PAGE_SIZE}`\r\n    );\r\n  }\r\n\r\n  insert(user: Partial<UserModel>): Observable<UserModel> {\r\n    return this.http.post<UserModel>(`${environment.API_URL}/users`, user);\r\n  }\r\n\r\n  delete(id: number): Observable<UserModel> {\r\n    return this.http.delete<UserModel>(`${environment.API_URL}/users/${id}`);\r\n  }\r\n\r\n  list(): Observable<UserModel[]> {\r\n    return this.http.get<UserModel[]>(`${environment.API_URL}/users`);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "UserRepository",
            "type": "injectable"
        },
        {
            "name": "UserUseCase",
            "id": "injectable-UserUseCase-d725ee07a931f2b05eee2d170e929395",
            "file": "projects/ambulance/src/app/users/application/user.usecase.ts",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<UserModel>>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserModel[]>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { UseCase } from '../../shared/interfaces/usecase.interface';\r\nimport { UserModel } from '../domain/user.model';\r\nimport { UserRepository } from './user.repository';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserUseCase implements UseCase<UserModel> {\r\n  constructor(private user: UserRepository) {}\r\n\r\n  getByPage(page: number): Observable<Page<UserModel>> {\r\n    return this.user.getByPage(page);\r\n  }\r\n\r\n  delete(id: number): Observable<UserModel> {\r\n    return this.user.delete(id);\r\n  }\r\n\r\n  list(): Observable<UserModel[]> {\r\n    return this.user.list();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "user",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "UserRepository",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UtilsService",
            "id": "injectable-UtilsService-7e04ccbd2eb14b605ffe3e759ee142f7",
            "file": "projects/ambulance/src/app/helpers/services/utils.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showBottomSheet",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "content",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "dto",
                            "type": "DtoExport<T | U>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [
                        "T",
                        "U"
                    ],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "content",
                            "type": "T[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "dto",
                            "type": "DtoExport<T | U>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showMessage",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2000"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "2000",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showModal",
                    "args": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "MatDialogRef<any>",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "classComponent",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable } from 'rxjs';\r\nimport { ConfirmComponent } from '../../shared/components/confirm/confirm.component';\r\nimport { DownloadComponent } from '../../shared/components/download/download.component';\r\nimport { DtoExport } from '../../shared/interfaces/dto-export.interface';\r\nimport { OptionsExport } from '../../shared/interfaces/option-export.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UtilsService {\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private snackBar: MatSnackBar,\r\n    private bottomSheet: MatBottomSheet\r\n  ) {}\r\n\r\n  confirm(message: string = ''): Observable<string> {\r\n    const reference: MatDialogRef<ConfirmComponent> = this.dialog.open(\r\n      ConfirmComponent,\r\n      {\r\n        width: '320px',\r\n        disableClose: true,\r\n      }\r\n    );\r\n\r\n    if (message) {\r\n      reference.componentInstance.message = message;\r\n    }\r\n\r\n    return reference.afterClosed();\r\n  }\r\n\r\n  showMessage(message: string, duration: number = 2000): void {\r\n    this.snackBar.open(message, '', {\r\n      duration,\r\n    });\r\n  }\r\n\r\n  showBottomSheet<T, U>(\r\n    title: string,\r\n    fileName: string,\r\n    content: T[],\r\n    dto: DtoExport<T, U>\r\n  ): void {\r\n    const options: OptionsExport<T, U> = { title, fileName, content, dto };\r\n    this.bottomSheet.open(DownloadComponent, { data: options });\r\n  }\r\n\r\n  showModal(\r\n    classComponent: any,\r\n    options: { [s: string]: string | boolean | number | object }\r\n  ): MatDialogRef<any> {\r\n    return this.dialog.open(classComponent, options);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "snackBar",
                        "type": "MatSnackBar",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "bottomSheet",
                        "type": "MatBottomSheet",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthenticationGuard",
            "id": "injectable-AuthenticationGuard-414d372ddb74289056901fcc5bd6ebfc",
            "file": "projects/ambulance/src/app/shared/guards/authentication.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { CanLoad } from '@angular/router';\r\nimport { AuthUseCase } from '../../core/application/auth.usecase';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthenticationGuard implements CanLoad {\r\n  constructor(private auth: AuthUseCase) {}\r\n\r\n  canLoad(): boolean {\r\n    return this.auth.isAuthenticated();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        },
        {
            "name": "AuthorizationGuard",
            "id": "injectable-AuthorizationGuard-fc5eed11e26e4c27a7d3d5caf60e5bce",
            "file": "projects/ambulance/src/app/shared/guards/authorization.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  RouterStateSnapshot,\r\n} from '@angular/router';\r\nimport { AuthUseCase } from '../../core/application/auth.usecase';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthorizationGuard implements CanActivate {\r\n  constructor(private auth: AuthUseCase) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot\r\n  ): boolean {\r\n    const { rolesAllowed } = route.data;\r\n    return this.auth.isAuthorized(rolesAllowed);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "TokenInterceptor",
            "id": "injectable-TokenInterceptor-1919bd5ede76421f2da502e2d638ade0",
            "file": "projects/ambulance/src/app/shared/interceptors/token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<any>>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  HttpErrorResponse,\r\n  HttpEvent,\r\n  HttpHandler,\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n} from '@angular/common/http';\r\nimport { Injectable, Injector } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, mergeMap, retry } from 'rxjs/operators';\r\nimport { AuthUseCase } from '../../core/application/auth.usecase';\r\nimport { Tokens } from '../../helpers/interfaces/tokens';\r\n\r\n@Injectable()\r\nexport class TokenInterceptor implements HttpInterceptor {\r\n  constructor(private injector: Injector) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    const authUseCase: AuthUseCase = this.injector.get(AuthUseCase);\r\n    const accessToken = authUseCase.accessToken;\r\n\r\n    const requestCloned = req.clone({\r\n      headers: req.headers.append('Authorization', `Bearer ${accessToken}`),\r\n    });\r\n\r\n    return next.handle(requestCloned).pipe(\r\n      catchError((error: HttpErrorResponse) => {\r\n        if (!(error.error instanceof ErrorEvent) && error.status === 409) {\r\n          const refreshToken = authUseCase.getFieldValue('refreshToken');\r\n          return authUseCase.getNewAccessToken(refreshToken).pipe(\r\n            retry(3),\r\n            mergeMap((response: Tokens) => {\r\n              authUseCase.setFieldValue('refreshToken', response.refreshToken);\r\n              authUseCase.setFieldValue('accessToken', response.accessToken);\r\n\r\n              const requestCloned = req.clone({\r\n                headers: req.headers.append(\r\n                  'Authorization',\r\n                  `Bearer ${response.accessToken}`\r\n                ),\r\n              });\r\n\r\n              return next.handle(requestCloned);\r\n            })\r\n          );\r\n        } else if (error.status === 401) {\r\n          return authUseCase.logout();\r\n        } else {\r\n          if (error.error && error.error.result) {\r\n            return throwError(error.error.result);\r\n          } else {\r\n            return throwError(error);\r\n          }\r\n        }\r\n      })\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "injector",
                        "type": "Injector",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "interceptor"
        }
    ],
    "classes": [
        {
            "name": "AuthRepository",
            "id": "class-AuthRepository-8d7ad9ae80e1b383331fa125585f91a5",
            "file": "projects/ambulance/src/app/core/application/auth.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { AuthModel } from '../domain/auth.model';\r\nimport { Tokens } from '../../helpers/interfaces/tokens';\r\n\r\nexport abstract class AuthRepository {\r\n  abstract login(auth: AuthModel): Observable<Tokens>;\r\n  abstract getNewAccessToken(refreshToken: string): Observable<Tokens>;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "getNewAccessToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Tokens>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "BaseComponent",
            "id": "class-BaseComponent-9a80a48c7b7b42edb5899d23a65b458d",
            "file": "projects/ambulance/src/app/shared/classes/baseComponent.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { environment } from 'projects/ambulance/src/environments/environment';\r\nimport { Observable } from 'rxjs';\r\nimport { UtilsService } from '../../helpers/services/utils.service';\r\nimport { KeyPadButton } from '../interfaces/keybutton.interface';\r\nimport { MetaDataColumn } from '../interfaces/metacolumn.interface';\r\nimport { Page } from '../interfaces/page.interface';\r\nimport { UseCase } from '../interfaces/usecase.interface';\r\n\r\nexport abstract class BaseComponent<T, U extends UseCase<T>> {\r\n  abstract metaDataColumns: MetaDataColumn[];\r\n  abstract keypadButtons: KeyPadButton[];\r\n  protected utilsService: UtilsService;\r\n  protected useCase: U;\r\n\r\n  totalRecords: number = 0;\r\n  data: T[] = [];\r\n  currentPage: number = 0;\r\n\r\n  constructor(usecase: U, utilsService: UtilsService) {\r\n    this.utilsService = utilsService;\r\n    this.useCase = usecase;\r\n    this.changePage(0);\r\n  }\r\n\r\n  changePage(page: number) {\r\n    this.useCase.getByPage(page).subscribe((response: Page<T>) => {\r\n      this.data = response.records;\r\n      this.totalRecords = response.totalRecords;\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    const result: Observable<string> = this.utilsService.confirm(\r\n      `¿Está seguro de querer eliminar?`\r\n    );\r\n    result.subscribe((res) => {\r\n      if (!res) {\r\n        return;\r\n      }\r\n\r\n      this.useCase.delete(id).subscribe(() => {\r\n        this.changePage(this.currentPage);\r\n        this.utilsService.showMessage('Eliminado correctamente');\r\n      });\r\n\r\n      /*       const position = this.records.findIndex((el) => el.id === id);\r\n      this.records.splice(position, 1);\r\n      const existsDataInPage = this.verifyExistsDataInPage(this.currentPage);\r\n      if (existsDataInPage) {\r\n        this.changePage(this.currentPage);\r\n      } else {\r\n        this.changePage(this.currentPage === 0 ? 0 : this.currentPage - 1);\r\n      } */\r\n    });\r\n  }\r\n\r\n  verifyExistsDataInPage(page: number): boolean {\r\n    return true;\r\n    /*     const pageSize = environment.PAGE_SIZE;\r\n    const skip = pageSize * page;\r\n    return !!this.records.slice(skip, skip + pageSize).length; */\r\n  }\r\n\r\n  abstract openForm(row: any): void;\r\n  abstract doAction(action: string): void;\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "usecase",
                        "type": "U",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "usecase",
                        "type": "U",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "keypadButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyPadButton[]",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "metaDataColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "useCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "verifyExistsDataInPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DriverExportDto",
            "id": "class-DriverExportDto-bba45a10738c71da4023ff8231239f02",
            "file": "projects/ambulance/src/app/drivers/dtos/driver-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\r\nimport { DriverModel } from '../domain/driver.model';\r\n\r\nexport interface IDtoExportDriver {\r\n  'Nombre del piloto': string;\r\n}\r\n\r\nexport class DriverExportDto\r\n  implements DtoExport<DriverModel, IDtoExportDriver>\r\n{\r\n  mapping(data: DriverModel[]): IDtoExportDriver[] {\r\n    return data.map((driver: DriverModel) => ({\r\n      'Nombre del piloto': driver.nombre,\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "mapping",
                    "args": [
                        {
                            "name": "data",
                            "type": "DriverModel[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDtoExportDriver[]",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "DriverModel[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DtoExport"
            ]
        },
        {
            "name": "DriverRepository",
            "id": "class-DriverRepository-0a60cb1ffe56aee110255a7fb931932c",
            "file": "projects/ambulance/src/app/drivers/application/driver.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { DriverModel } from '../domain/driver.model';\r\n\r\nexport abstract class DriverRepository {\r\n  abstract getByPage(page: number): Observable<Page<DriverModel>>;\r\n  abstract insert(driver: Partial<DriverModel>): Observable<DriverModel>;\r\n  abstract delete(id: number): Observable<DriverModel>;\r\n  abstract list(): Observable<DriverModel[]>;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<DriverModel>>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<DriverModel>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "driver",
                            "type": "Partial<DriverModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<DriverModel[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "MedicExportDto",
            "id": "class-MedicExportDto-cdaa23746c95e6d581f0965ca1d895dd",
            "file": "projects/ambulance/src/app/medics/dtos/medic-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\r\nimport { MedicModel } from '../domain/medic.model';\r\n\r\nexport interface IDtoExportMedic {\r\n  'Nombre del usuario': string;\r\n  'Correo electrónico': string;\r\n}\r\n\r\nexport class MedicExportDto implements DtoExport<MedicModel, IDtoExportMedic> {\r\n  mapping(data: MedicModel[]): IDtoExportMedic[] {\r\n    return data.map((medic: MedicModel) => ({\r\n      'Nombre del usuario': medic.nombre,\r\n      'Correo electrónico': medic.correo,\r\n      CMP: medic.cmp,\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "mapping",
                    "args": [
                        {
                            "name": "data",
                            "type": "MedicModel[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDtoExportMedic[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "MedicModel[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DtoExport"
            ]
        },
        {
            "name": "MedicRepository",
            "id": "class-MedicRepository-dda6736f4d8bfaaea69154a436b9fd57",
            "file": "projects/ambulance/src/app/medics/application/medic.repostiory.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { MedicModel } from '../domain/medic.model';\r\n\r\nexport abstract class MedicRepository {\r\n  abstract getByPage(page: number): Observable<Page<MedicModel>>;\r\n  abstract insert(medic: Partial<MedicModel>): Observable<MedicModel>;\r\n  abstract delete(id: number): Observable<MedicModel>;\r\n  abstract list(): Observable<MedicModel[]>;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<MedicModel>>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<MedicModel>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "medic",
                            "type": "Partial<MedicModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<MedicModel[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StorageInfraestructure",
            "id": "class-StorageInfraestructure-1e1bfe177ba268c63c75f55a7b33a92f",
            "file": "projects/ambulance/src/app/core/infraestructure/storage.infraestructure.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { StorageRepository } from '../application/storage.repository';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\ninterface IPayload {\r\n  iat: number;\r\n  exp: number;\r\n  name: string;\r\n  email: string;\r\n  roles: string[];\r\n}\r\n\r\nexport class StorageInfraestructure extends StorageRepository {\r\n  setStorage(nameProperty: string, value: string): void {\r\n    sessionStorage.setItem(nameProperty, value);\r\n  }\r\n  getStorage(nameProperty: string): string | null {\r\n    return sessionStorage.getItem(nameProperty);\r\n  }\r\n  clear(): void {\r\n    sessionStorage.clear();\r\n  }\r\n  getFieldInToken(fieldName: string) {\r\n    const accessToken = this.getStorage('accessToken');\r\n\r\n    if (!accessToken) {\r\n      return null;\r\n    }\r\n    try {\r\n      const payload: any = jwt_decode(accessToken) as IPayload;\r\n      return payload[fieldName];\r\n    } catch (error) {}\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StorageRepository"
                    }
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageRepository"
                    }
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageRepository"
                    }
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageRepository"
                    }
                }
            ],
            "indexSignatures": [],
            "extends": "StorageRepository",
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "StorageRepository",
            "id": "class-StorageRepository-027e99ec11305e406d12bf8c40c7dd8f",
            "file": "projects/ambulance/src/app/core/application/storage.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class StorageRepository {\r\n  abstract setStorage(nameProperty: string, value: string): void;\r\n  abstract getStorage(nameProperty: string): string | null;\r\n  abstract clear(): void;\r\n  abstract getFieldInToken(fieldName: string): any;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 4,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "getFieldInToken",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStorage",
                    "args": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "nameProperty",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "UserExportDto",
            "id": "class-UserExportDto-a5b3e628719bc705a4631b8c573f76f1",
            "file": "projects/ambulance/src/app/users/dtos/user-export.dto.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DtoExport } from '../../shared/interfaces/dto-export.interface';\r\nimport { UserModel } from '../domain/user.model';\r\n\r\nexport interface IDtoExportUser {\r\n  'Nombre del usuario': string;\r\n  'Correo electrónico': string;\r\n}\r\n\r\nexport class UserExportDto implements DtoExport<UserModel, IDtoExportUser> {\r\n  mapping(data: UserModel[]): IDtoExportUser[] {\r\n    return data.map((user: UserModel) => ({\r\n      'Nombre del usuario': user.nombre,\r\n      'Correo electrónico': user.correo,\r\n    }));\r\n  }\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "mapping",
                    "args": [
                        {
                            "name": "data",
                            "type": "UserModel[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDtoExportUser[]",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "UserModel[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "DtoExport"
            ]
        },
        {
            "name": "UserRepository",
            "id": "class-UserRepository-0d4bfecef856876308b91a2b1d89c348",
            "file": "projects/ambulance/src/app/users/application/user.repository.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { Observable } from 'rxjs';\r\nimport { Page } from '../../shared/interfaces/page.interface';\r\nimport { UserModel } from '../domain/user.model';\r\n\r\nexport abstract class UserRepository {\r\n  abstract getByPage(page: number): Observable<Page<UserModel>>;\r\n  abstract insert(user: Partial<UserModel>): Observable<UserModel>;\r\n  abstract delete(id: number): Observable<UserModel>;\r\n  abstract list(): Observable<UserModel[]>;\r\n}\r\n",
            "properties": [],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getByPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Page<UserModel>>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "insert",
                    "args": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserModel>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "Partial<UserModel>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "list",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserModel[]>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "RolesAllowedDirective",
            "id": "directive-RolesAllowedDirective-c3cf9de2a25796e63663611c89c85043",
            "file": "projects/ambulance/src/app/shared/directives/roles-allowed.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { AuthUseCase } from '../../core/application/auth.usecase';\r\n\r\n@Directive({\r\n  selector: '[roles-allowed]',\r\n})\r\nexport class RolesAllowedDirective {\r\n  @Input('roles-allowed') rolesAllowed: string[] = [];\r\n  hasView = false;\r\n\r\n  constructor(\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private authUseCase: AuthUseCase\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.execute();\r\n  }\r\n\r\n  execute() {\r\n    const isUserLogged = this.authUseCase.isAuthenticated();\r\n    const rolesUser = this.authUseCase.getRoles();\r\n\r\n    const lengthRolesAllowed = this.rolesAllowed.length;\r\n    let userAuthorized = false;\r\n\r\n    for (let ind = 0; ind < lengthRolesAllowed; ind++) {\r\n      if (rolesUser.includes(this.rolesAllowed[ind])) {\r\n        userAuthorized = true;\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (isUserLogged && userAuthorized && !this.hasView) {\r\n      if (!this.hasView) {\r\n        this.viewContainerRef.createEmbeddedView(this.templateRef);\r\n        this.hasView = true;\r\n      }\r\n    } else {\r\n      this.viewContainerRef.clear();\r\n      this.hasView = false;\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[roles-allowed]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "roles-allowed",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "hasView",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "execute",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authUseCase",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "templateRef",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authUseCase",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-db487eea559f646571b43d2890ff3b7a",
            "file": "projects/ambulance/src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "config",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigLayout",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "expanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "defaultValue": "'ambulance'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleExpanded",
                    "args": [
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "expanded",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ConfigLayout } from './config/interfaces/config-layout.interface';\r\nimport { ConfigService } from './config/services/config.service';\r\n\r\n@Component({\r\n  selector: 'amb-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent {\r\n  title = 'ambulance';\r\n  expanded = true;\r\n\r\n  config!: ConfigLayout;\r\n\r\n  constructor(private configService: ConfigService) {\r\n    this.configService.configuration.subscribe(\r\n      (response: ConfigLayout) => (this.config = response)\r\n    );\r\n  }\r\n\r\n  toggleExpanded(expanded: boolean) {\r\n    this.expanded = expanded;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-sidenav-content {\r\n  min-height: 100vh;\r\n}\r\n\r\nmat-sidenav {\r\n  max-width: 280px;\r\n  background-color: rgb(45, 50, 62);\r\n}\r\n\r\n.logo {\r\n  padding: 0 24px;\r\n  background-color: rbg(30, 33, 41);\r\n  color: hsla(0, 0%, 100%, 0.7) !important;\r\n  min-height: 64px;\r\n}\r\n\r\n.logo h3 {\r\n  padding: 0;\r\n  margin: 0;\r\n  line-height: 64px;\r\n}\r\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "configService",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<mat-sidenav-container autosize=\"true\">\r\n  <mat-sidenav opened=\"true\" mode=\"side\" *ngIf=\"!config.menu.hidden\">\r\n    <div class=\"logo\" fxLayout fxLayoutGap=\"20px\" fxLayoutAlign=\"start center\">\r\n      <mat-icon>face</mat-icon>\r\n      <h3 *ngIf=\"expanded\" fxLayoutGap>Sistema de historias</h3>\r\n    </div>\r\n    <amb-menu (onToggleExpanded)=\"toggleExpanded($event)\"></amb-menu>\r\n  </mat-sidenav>\r\n  <mat-sidenav-content>\r\n    <amb-header *ngIf=\"!config.header.hidden\"></amb-header>\r\n    <router-outlet></router-outlet>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "What background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 322,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "Button contents",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string"
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "Is this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean"
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "How large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CdevTableComponent",
            "id": "component-CdevTableComponent-fba0c983894e1acd6ca7597c5489f4aa",
            "file": "projects/cdev-table/src/lib/cdev-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "cdev-table",
            "styleUrls": [
                "./cdev-table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./cdev-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any"
                },
                {
                    "name": "metaDataColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "MetaDataColumn[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatColumnDef>",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatColumnDef, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "listFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  Input,\r\n  OnInit,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatColumnDef, MatTable } from '@angular/material/table';\r\nimport { MetaDataColumn } from './metacolumn.interface';\r\n\r\n@Component({\r\n  selector: 'cdev-table',\r\n  templateUrl: './cdev-table.component.html',\r\n  styleUrls: ['./cdev-table.component.css'],\r\n})\r\nexport class CdevTableComponent implements OnInit {\r\n  @Input() data: any;\r\n  @Input() metaDataColumns!: MetaDataColumn[];\r\n  listFields: string[] = [];\r\n  @ContentChildren(MatColumnDef, { descendants: true })\r\n  columnsDef!: QueryList<MatColumnDef>;\r\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>;\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.metaDataColumns) {\r\n      this.listFields = this.metaDataColumns.map((x) => x.field);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this.columnsDef) {\r\n      return;\r\n    }\r\n    this.columnsDef.forEach((columnDef) => {\r\n      this.listFields.push(columnDef.name);\r\n      this.table?.addColumnDef(columnDef);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".highline:hover {\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.head th {\r\n  font-size: 20px;\r\n}\r\n",
                    "styleUrl": "./cdev-table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\">\r\n  <ng-content></ng-content>\r\n  <table mat-table [dataSource]=\"data\">\r\n    <ng-container\r\n      [matColumnDef]=\"metadata.field\"\r\n      *ngFor=\"let metadata of metaDataColumns\"\r\n    >\r\n      <th mat-header-cell *matHeaderCellDef>{{ metadata.title }}</th>\r\n      <td mat-cell *matCellDef=\"let row\">{{ row[metadata.field] }}</td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"listFields; sticky: true\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: listFields\" class=\"highline\"></tr>\r\n  </table>\r\n</div>\r\n"
        },
        {
            "name": "ConfirmComponent",
            "id": "component-ConfirmComponent-6fe8fc742ac79ac59d350c46a61bdc86",
            "file": "projects/ambulance/src/app/shared/components/confirm/confirm.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-confirm",
            "styleUrls": [
                "./confirm.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./confirm.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "message",
                    "defaultValue": "'¿Quiere eliminar?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-confirm',\r\n  templateUrl: './confirm.component.html',\r\n  styleUrls: ['./confirm.component.css'],\r\n})\r\nexport class ConfirmComponent implements OnInit {\r\n  message = '¿Quiere eliminar?';\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h3 {\r\n  text-align: center;\r\n}\r\n",
                    "styleUrl": "./confirm.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-dialog-content>\r\n  <h3>{{ message }}</h3>\r\n  <div fxLayout fxLayoutAlign=\"center center\" fxLayoutGap=\"15px\">\r\n    <button mat-raised-button color=\"accent\" mat-dialog-close=\"si\">Sí</button>\r\n    <button mat-button mat-dialog-close>No</button>\r\n  </div>\r\n</mat-dialog-content>\r\n"
        },
        {
            "name": "ContainerComponent",
            "id": "component-ContainerComponent-7b5b23a363ca0cb2a8b9cb0ce5a040c3",
            "file": "projects/ambulance/src/app/shared/components/container/container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-container",
            "styleUrls": [
                "./container.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./container.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-container',\r\n  templateUrl: './container.component.html',\r\n  styleUrls: ['./container.component.css']\r\n})\r\nexport class ContainerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  padding: 20px 0;\r\n  background-color: whitesmoke;\r\n  height: calc(100vh - 144px);\r\n}\r\n\r\nmat-card {\r\n  padding: 20px;\r\n}\r\n",
                    "styleUrl": "./container.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutAlign=\"center\" class=\"container\">\r\n  <mat-card fxFlex=\"1 1 95%\" class=\"mat-elevation-z15\">\r\n    <ng-content></ng-content>\r\n  </mat-card>\r\n</div>\r\n"
        },
        {
            "name": "DownloadComponent",
            "id": "component-DownloadComponent-b1110c23232e424a85ca483469146334",
            "file": "projects/ambulance/src/app/shared/components/download/download.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-download",
            "styleUrls": [
                "./download.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./download.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataToExport",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "addColumnsToPDF",
                    "args": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addDataToPDF",
                    "args": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dataFormatted",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "export",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "option",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "exportToExcel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "exportToPDF",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInformationFormatted",
                    "args": [],
                    "optional": false,
                    "returnType": "{ content: {}; styles: { header: { fontSize: number; bold: boolean; margin: {}; }; }; }",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "transformDataByDTO",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Inject, OnInit } from '@angular/core';\r\nimport {\r\n  MatBottomSheetRef,\r\n  MAT_BOTTOM_SHEET_DATA,\r\n} from '@angular/material/bottom-sheet';\r\nimport * as XLS from 'xlsx';\r\n\r\ndeclare var require: any;\r\n\r\nconst pdfMake = require('pdfmake/build/pdfmake.js');\r\nconst pdfFonts = require('pdfmake/build/vfs_fonts.js');\r\npdfMake.vfs = pdfFonts.pdfMake.vfs;\r\n\r\n@Component({\r\n  selector: 'amb-download',\r\n  templateUrl: './download.component.html',\r\n  styleUrls: ['./download.component.css'],\r\n})\r\nexport class DownloadComponent implements OnInit {\r\n  dataToExport!: any[];\r\n\r\n  constructor(\r\n    @Inject(MAT_BOTTOM_SHEET_DATA) private data: any,\r\n    private reference: MatBottomSheetRef<DownloadComponent>\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  export(event: MouseEvent, option: string, action: string = ''): void {\r\n    this.transformDataByDTO();\r\n    event.preventDefault();\r\n    switch (option) {\r\n      case 'excel':\r\n        this.exportToExcel();\r\n        break;\r\n      case 'pdf':\r\n        this.exportToPDF(action);\r\n        break;\r\n    }\r\n    this.reference.dismiss();\r\n  }\r\n\r\n  transformDataByDTO() {\r\n    this.dataToExport = this.data.dto.mapping(this.data.content);\r\n  }\r\n\r\n  exportToExcel() {\r\n    const ws: XLS.WorkSheet = XLS.utils.json_to_sheet(this.dataToExport);\r\n    const book: XLS.WorkBook = XLS.utils.book_new();\r\n\r\n    XLS.utils.book_append_sheet(book, ws, this.data.title);\r\n    XLS.writeFile(book, this.data.fileName + '.xlsx');\r\n  }\r\n\r\n  exportToPDF(action: string) {\r\n    const informationFormatted = this.getInformationFormatted();\r\n    const pdfGenerated = pdfMake.createPdf(informationFormatted);\r\n    switch (action) {\r\n      case 'open':\r\n        pdfGenerated.open();\r\n        break;\r\n      case 'print':\r\n        pdfGenerated.print();\r\n        break;\r\n      case 'download':\r\n        pdfGenerated.download();\r\n    }\r\n  }\r\n\r\n  getInformationFormatted() {\r\n    const dataFormatted = {\r\n      content: [\r\n        {\r\n          text: this.data.title,\r\n          bold: true,\r\n          fontSize: 20,\r\n          alignment: 'center',\r\n          margin: [0, 0, 0, 20],\r\n        },\r\n      ],\r\n      styles: {\r\n        header: {\r\n          fontSize: 20,\r\n          bold: true,\r\n          margin: [0, 0, 0, 20],\r\n        },\r\n      },\r\n    };\r\n\r\n    this.addColumnsToPDF(dataFormatted);\r\n    this.addDataToPDF(dataFormatted);\r\n\r\n    return dataFormatted;\r\n  }\r\n\r\n  addColumnsToPDF(dataFormatted: any) {\r\n    const headerData = this.dataToExport[0];\r\n    const headersColumns = [];\r\n    for (const key in headerData) {\r\n      headersColumns.push({ text: key, style: 'header' });\r\n    }\r\n\r\n    dataFormatted.content.push({ columns: headersColumns });\r\n  }\r\n\r\n  addDataToPDF(dataFormatted: any) {\r\n    this.dataToExport.forEach((data) => {\r\n      const items = [];\r\n      for (const key in data) {\r\n        items.push(data[key]);\r\n      }\r\n\r\n      dataFormatted.content.push({ columns: items });\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./download.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "reference",
                        "type": "MatBottomSheetRef<DownloadComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "data",
                        "type": "any",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "reference",
                        "type": "MatBottomSheetRef<DownloadComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-nav-list>\r\n  <a href=\"#\" mat-list-item (click)=\"export($event, 'excel')\">\r\n    <span>Exportar a Excel</span> </a\r\n  ><a href=\"#\" mat-list-item (click)=\"export($event, 'pdf', 'open')\">\r\n    <span>Exportar a PDF (open)</span>\r\n  </a>\r\n\r\n  <a href=\"#\" mat-list-item (click)=\"export($event, 'pdf', 'print')\">\r\n    <span>Exporta a PDF (print)</span> </a\r\n  ><a href=\"#\" mat-list-item (click)=\"export($event, 'pdf', 'download')\">\r\n    <span> Exportar a PDF (download) </span>\r\n  </a>\r\n</mat-nav-list>\r\n"
        },
        {
            "name": "FormComponent",
            "id": "component-FormComponent-4e22816066af218c9d086b0394427032",
            "file": "projects/ambulance/src/app/users/components/form/form.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-form",
            "styleUrls": [
                "./form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./form.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-form',\r\n  templateUrl: './form.component.html',\r\n  styleUrls: ['./form.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FormComponent implements OnInit {\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".panel-container {\r\n  width: 600px;\r\n}\r\n",
                    "styleUrl": "./form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>form works!</p>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-d03c95a6d239dc5a3c3232d806df4fbc-1",
            "file": "projects/ambulance/src/app/core/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-header",
            "styleUrls": [
                "./header.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { AuthUseCase } from '../../application/auth.usecase';\r\n\r\n@Component({\r\n  selector: 'amb-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  constructor(private auth: AuthUseCase) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  logout() {\r\n    this.auth.logout();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\r\n  background-color: whitesmoke !important;\r\n  border-bottom: 1px solid #6b6b6b;\r\n}\r\n\r\nmat-toolbar img {\r\n  width: 40px;\r\n  max-height: 40px;\r\n  border-radius: 50%;\r\n  border: 1px solid transparent;\r\n}\r\n\r\n.profile {\r\n  height: 100%;\r\n}\r\n",
                    "styleUrl": "./header.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "auth",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar fxLayout fxLayoutAlign=\"end center\">\r\n  <button mat-button class=\"profile\" [matMenuTriggerFor]=\"menu\">\r\n    <img src=\"/assets/img/avatar.jpg\" alt=\"\" />\r\n    <span>Nombre usuario</span>\r\n    <mat-icon>keyboard_arrow_down</mat-icon>\r\n  </button>\r\n  <mat-menu #menu=\"matMenu\">\r\n    <button mat-menu-item (click)=\"logout()\">\r\n      <mat-icon>logout</mat-icon>\r\n      <span>Cerrar sesión</span>\r\n    </button>\r\n  </mat-menu>\r\n</mat-toolbar>\r\n"
        },
        {
            "name": "KeypadComponent",
            "id": "component-KeypadComponent-da1b891b114abcbb5cb8073654bf3d74",
            "file": "projects/ambulance/src/app/shared/components/keypad/keypad.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-keypad",
            "styleUrls": [
                "./keypad.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./keypad.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "keypadButtons",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "KeyPadButton[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { KeyPadButton } from '../../interfaces/keybutton.interface';\r\n\r\n@Component({\r\n  selector: 'amb-keypad',\r\n  templateUrl: './keypad.component.html',\r\n  styleUrls: ['./keypad.component.css'],\r\n})\r\nexport class KeypadComponent implements OnInit {\r\n  @Input() keypadButtons: KeyPadButton[] = [];\r\n  @Output() onClick: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  doAction(action: string) {\r\n    this.onClick.emit(action);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "div {\r\n  position: fixed;\r\n  bottom: 70px;\r\n  right: 10px;\r\n  z-index: 10000000;\r\n}\r\n",
                    "styleUrl": "./keypad.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\" fxLayoutGap=\"10px\">\r\n  <button\r\n    mat-fab\r\n    *ngFor=\"let button of keypadButtons\"\r\n    [color]=\"button.color\"\r\n    [matTooltip]=\"button.tooltip\"\r\n    (click)=\"doAction(button.action)\"\r\n  >\r\n    <mat-icon>{{ button.icon }}</mat-icon>\r\n  </button>\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-9ef1aad543b212e2ad8658407de9240d",
            "file": "projects/ambulance/src/app/core/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<AuthModel>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<AuthModel>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "togglePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthModel } from '../../domain/auth.model';\r\n\r\n@Component({\r\n  selector: 'amb-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  @Output() onLogin: EventEmitter<AuthModel> = new EventEmitter<AuthModel>();\r\n  group: FormGroup;\r\n  togglePassword = true;\r\n\r\n  constructor() {\r\n    this.group = new FormGroup({\r\n      correo: new FormControl(null, [Validators.required, Validators.email]),\r\n      password: new FormControl(null, Validators.required),\r\n      recaptchaReactive: new FormControl('abc'),\r\n      // recaptchaReactive: new FormControl(null, Validators.required),\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  login() {\r\n    const userInfo: AuthModel = this.group.value;\r\n    this.onLogin.emit(userInfo);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  width: 80%;\r\n  display: block;\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n}\r\n\r\n.recaptcha {\r\n  padding: 10px 0;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<form fxLayout=\"column\" [formGroup]=\"group\">\r\n  <h2>Credenciales</h2>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Correo</mat-label>\r\n    <input\r\n      type=\"text\"\r\n      matInput\r\n      required\r\n      placeholder=\"Ingrese su correo\"\r\n      formControlName=\"correo\"\r\n    />\r\n    <mat-icon matSuffix>email</mat-icon>\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>Contraseña</mat-label>\r\n    <input\r\n      type=\"{{ togglePassword ? 'password' : 'text' }}\"\r\n      matInput\r\n      required\r\n      placeholder=\"Ingrese su contraseña\"\r\n      formControlName=\"password\"\r\n    />\r\n    <button\r\n      mat-icon-button\r\n      matSuffix\r\n      type=\"button\"\r\n      (click)=\"togglePassword = !togglePassword\"\r\n    >\r\n      <mat-icon>{{ togglePassword ? \"lock\" : \"lock_open\" }}</mat-icon>\r\n    </button>\r\n  </mat-form-field>\r\n<!--   <div class=\"recaptcha\">\r\n    <re-captcha formControlName=\"recaptchaReactive\"></re-captcha>\r\n  </div> -->\r\n  <button\r\n    mat-raised-button\r\n    color=\"primary\"\r\n    [disabled]=\"group.invalid\"\r\n    (click)=\"login()\"\r\n  >\r\n    Ingresar\r\n  </button>\r\n</form>\r\n"
        },
        {
            "name": "MenuComponent",
            "id": "component-MenuComponent-cb4f76ea26e7a78ca0a3684ea9645d50",
            "file": "projects/ambulance/src/app/core/components/menu/menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-menu",
            "styleUrls": [
                "./menu.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./menu.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "onToggleExpanded",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "expanded",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "listMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleExpand",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { IMenu, MenuService } from '../../../helpers/services/menu.service';\r\n\r\n@Component({\r\n  selector: 'amb-menu',\r\n  templateUrl: './menu.component.html',\r\n  styleUrls: ['./menu.component.css'],\r\n})\r\nexport class MenuComponent implements OnInit {\r\n  @Output() onToggleExpanded: EventEmitter<boolean> =\r\n    new EventEmitter<boolean>();\r\n  expanded = true;\r\n  listMenu: IMenu[];\r\n\r\n  constructor(private menuService: MenuService) {\r\n    this.listMenu = this.menuService.getMenu();\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  toggleExpand() {\r\n    this.expanded = !this.expanded;\r\n    this.onToggleExpanded.emit(this.expanded);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-nav-list {\r\n  width: 95%;\r\n  height: calc(100vh - 74px);\r\n}\r\n\r\nmat-list-item {\r\n  margin-top: 10px;\r\n  border-radius: 0 24px 24px 0;\r\n}\r\n\r\na,\r\na:link,\r\na:visited,\r\na:active {\r\n  color: white !important;\r\n  font-size: 14px;\r\n}\r\n\r\nspan {\r\n  display: inline-block;\r\n  padding-left: 8px;\r\n}\r\n",
                    "styleUrl": "./menu.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-nav-list fxLayout=\"column\" fxLayoutAlign=\"space-between\">\r\n  <div>\r\n    <mat-list-item *ngFor=\"let menu of listMenu\">\r\n      <a [routerLink]=\"menu.url\">\r\n        <button mat-icon-button>\r\n          <mat-icon [svgIcon]=\"menu.icon\"></mat-icon>\r\n          <span *ngIf=\"expanded\">{{ menu.title }}</span>\r\n        </button>\r\n      </a>\r\n    </mat-list-item>\r\n  </div>\r\n  <div>\r\n    <mat-list-item>\r\n      <button mat-icon-button color=\"accent\" (click)=\"toggleExpand()\">\r\n        <mat-icon *ngIf=\"expanded\">arrow_back_ios</mat-icon>\r\n        <mat-icon *ngIf=\"!expanded\">arrow_forward_ios</mat-icon>\r\n      </button>\r\n    </mat-list-item>\r\n  </div>\r\n</mat-nav-list>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": ""
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-5f628dc0f74324466f926cfa9c8498f4",
            "file": "projects/ambulance/src/app/drivers/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DriverModel[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "keypadButtons",
                    "defaultValue": "[\r\n    {\r\n      icon: 'cloud_download',\r\n      tooltip: 'DESCARGAR',\r\n      color: 'accent',\r\n      action: 'DOWNLOAD',\r\n    },\r\n    {\r\n      icon: 'add',\r\n      tooltip: 'AGREGAR',\r\n      color: 'primary',\r\n      action: 'NEW',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyPadButton[]",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "useCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "verifyExistsDataInPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UtilsService } from '../../../helpers/services/utils.service';\r\nimport { BaseComponent } from '../../../shared/classes/baseComponent';\r\nimport { KeyPadButton } from '../../../shared/interfaces/keybutton.interface';\r\nimport { MetaDataColumn } from '../../../shared/interfaces/metacolumn.interface';\r\nimport { DriverUseCase } from '../../application/driver.usecase';\r\nimport { DriverModel } from '../../domain/driver.model';\r\nimport { DriverExportDto } from '../../dtos/driver-export.dto';\r\n\r\n@Component({\r\n  selector: 'amb-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.css'],\r\n})\r\nexport class PageListComponent extends BaseComponent<\r\n  DriverModel,\r\n  DriverUseCase\r\n> {\r\n  data: DriverModel[] = [];\r\n  totalRecords: number = 0;\r\n  keypadButtons: KeyPadButton[] = [\r\n    {\r\n      icon: 'cloud_download',\r\n      tooltip: 'DESCARGAR',\r\n      color: 'accent',\r\n      action: 'DOWNLOAD',\r\n    },\r\n    {\r\n      icon: 'add',\r\n      tooltip: 'AGREGAR',\r\n      color: 'primary',\r\n      action: 'NEW',\r\n    },\r\n  ];\r\n  doAction(action: string) {\r\n    switch (action) {\r\n      case 'DOWNLOAD':\r\n        const dto = new DriverExportDto();\r\n        this.driver.list().subscribe((response: DriverModel[]) => {\r\n          this.utilsService.showBottomSheet(\r\n            'Lista de pilotos',\r\n            'drivers',\r\n            response,\r\n            dto\r\n          );\r\n        });\r\n        break;\r\n      case 'NEW':\r\n        //this.openForm();\r\n        break;\r\n    }\r\n  }\r\n\r\n  openForm(row: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  metaDataColumns: MetaDataColumn[] = [\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n  ];\r\n\r\n  constructor(\r\n    protected driver: DriverUseCase,\r\n    protected utilsService: UtilsService\r\n  ) {\r\n    super(driver, utilsService);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "driver",
                        "type": "DriverUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "driver",
                        "type": "DriverUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "templateData": "<amb-title></amb-title>\r\n<amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <cdev-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\r\n          <button\r\n            mat-icon-button\r\n            color=\"primary\"\r\n            (click)=\"openForm(row)\"\r\n            matTooltip=\"EDITAR\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button\r\n            mat-icon-button\r\n            color=\"accent\"\r\n            (click)=\"delete(row.id)\"\r\n            matTooltip=\"ELIMINAR\"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </cdev-table>\r\n  </perfect-scrollbar>\r\n  <amb-paginator\r\n    (onChangePage)=\"changePage($event)\"\r\n    [length]=\"totalRecords\"\r\n    [currentPage]=\"currentPage\"\r\n  ></amb-paginator>\r\n</amb-container>\r\n<amb-keypad\r\n  [keypadButtons]=\"keypadButtons\"\r\n  (onClick)=\"doAction($event)\"\r\n></amb-keypad>\r\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-c9dfcc1c687174d017cafcc4e4ef4790-1",
            "file": "projects/ambulance/src/app/histories/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[\r\n    { id: 1, patient: 'John', medic: 'Abel' },\r\n    { id: 2, patient: 'Jane', medic: 'Jorge' },\r\n    { id: 3, patient: 'Jack', medic: 'Luis' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\r\n    { field: 'id', title: 'ID' },\r\n    { field: \"patient\", title: \"Nombre del paciente\" },\r\n    { field: \"medic\", title: \"Nombre del médico\" },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { MetaDataColumn } from '../../../shared/interfaces/metacolumn.interface';\r\n\r\n@Component({\r\n  selector: 'amb-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.css'],\r\n})\r\nexport class PageListComponent implements OnInit {\r\n  data: any[] = [\r\n    { id: 1, patient: 'John', medic: 'Abel' },\r\n    { id: 2, patient: 'Jane', medic: 'Jorge' },\r\n    { id: 3, patient: 'Jack', medic: 'Luis' },\r\n  ];\r\n\r\n  metaDataColumns: MetaDataColumn[] = [\r\n    { field: 'id', title: 'ID' },\r\n    { field: \"patient\", title: \"Nombre del paciente\" },\r\n    { field: \"medic\", title: \"Nombre del médico\" },\r\n  ]\r\n  // listFields: string[] = ['id', 'patient', 'medic'];\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "PageListComponent-1",
            "templateData": "<amb-title></amb-title>\r\n<amb-container>\r\n  <amb-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\"></amb-table>\r\n</amb-container>\r\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-b14885369fc01742b6f7ba2aac9b712d-2",
            "file": "projects/ambulance/src/app/medics/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "keypadButtons",
                    "defaultValue": "[\r\n    {\r\n      icon: 'cloud_download',\r\n      tooltip: 'DESCARGAR',\r\n      color: 'accent',\r\n      action: 'DOWNLOAD',\r\n    },\r\n    {\r\n      icon: 'add',\r\n      tooltip: 'AGREGAR',\r\n      color: 'primary',\r\n      action: 'NEW',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyPadButton[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n    { field: 'apellido', title: 'Apellido' },\r\n    { field: 'cmp', title: 'CMP' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "useCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "verifyExistsDataInPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { UtilsService } from '../../../helpers/services/utils.service';\r\nimport { BaseComponent } from '../../../shared/classes/baseComponent';\r\nimport { KeyPadButton } from '../../../shared/interfaces/keybutton.interface';\r\nimport { MetaDataColumn } from '../../../shared/interfaces/metacolumn.interface';\r\nimport { UserModel } from '../../../users/domain/user.model';\r\nimport { MedicUseCase } from '../../application/medic.usecase';\r\nimport { MedicModel } from '../../domain/medic.model';\r\nimport { MedicExportDto } from '../../dtos/medic-export.dto';\r\n\r\n@Component({\r\n  selector: 'amb-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.css'],\r\n})\r\nexport class PageListComponent extends BaseComponent<MedicModel, MedicUseCase> {\r\n  keypadButtons: KeyPadButton[] = [\r\n    {\r\n      icon: 'cloud_download',\r\n      tooltip: 'DESCARGAR',\r\n      color: 'accent',\r\n      action: 'DOWNLOAD',\r\n    },\r\n    {\r\n      icon: 'add',\r\n      tooltip: 'AGREGAR',\r\n      color: 'primary',\r\n      action: 'NEW',\r\n    },\r\n  ];\r\n  doAction(action: string) {\r\n    switch (action) {\r\n      case 'DOWNLOAD':\r\n        const dto = new MedicExportDto();\r\n        this.medic.list().subscribe((response: MedicModel[]) => {\r\n          this.utilsService.showBottomSheet(\r\n            'Lista de médicos',\r\n            'medicos',\r\n            response,\r\n            dto\r\n          );\r\n        });\r\n        break;\r\n      case 'NEW':\r\n        //this.openForm();\r\n        break;\r\n    }\r\n  }\r\n  openForm(row: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  metaDataColumns: MetaDataColumn[] = [\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n    { field: 'apellido', title: 'Apellido' },\r\n    { field: 'cmp', title: 'CMP' },\r\n  ];\r\n\r\n  constructor(\r\n    protected medic: MedicUseCase,\r\n    protected utilsService: UtilsService\r\n  ) {\r\n    super(medic, utilsService);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "medic",
                        "type": "MedicUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 58,
                "jsdoctags": [
                    {
                        "name": "medic",
                        "type": "MedicUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "PageListComponent-2",
            "templateData": "<amb-title></amb-title>\r\n<amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <cdev-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\r\n          <button\r\n            mat-icon-button\r\n            color=\"primary\"\r\n            (click)=\"openForm(row)\"\r\n            matTooltip=\"EDITAR\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button\r\n            mat-icon-button\r\n            color=\"accent\"\r\n            (click)=\"delete(row.id)\"\r\n            matTooltip=\"ELIMINAR\"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </cdev-table>\r\n  </perfect-scrollbar>\r\n  <amb-paginator\r\n    (onChangePage)=\"changePage($event)\"\r\n    [length]=\"totalRecords\"\r\n    [currentPage]=\"currentPage\"\r\n  ></amb-paginator>\r\n</amb-container>\r\n<amb-keypad\r\n  [keypadButtons]=\"keypadButtons\"\r\n  (onClick)=\"doAction($event)\"\r\n></amb-keypad>\r\n"
        },
        {
            "name": "PageListComponent",
            "id": "component-PageListComponent-eadc6a85e72c2f2e96f7787b85ade366-3",
            "file": "projects/ambulance/src/app/users/pages/page-list/page-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-list",
            "styleUrls": [
                "./page-list.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserModel[]",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "keypadButtons",
                    "defaultValue": "[\r\n    {\r\n      icon: 'cloud_download',\r\n      tooltip: 'DESCARGAR',\r\n      color: 'accent',\r\n      action: 'DOWNLOAD',\r\n    },\r\n    {\r\n      icon: 'add',\r\n      tooltip: 'AGREGAR',\r\n      color: 'primary',\r\n      action: 'NEW',\r\n    },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "KeyPadButton[]",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "metaDataColumns",
                    "defaultValue": "[\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n    { field: 'correo', title: 'Correo' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetaDataColumn[]",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "useCase",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "U",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "utilsService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UtilsService",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "doAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "openForm",
                    "args": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "row",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                },
                {
                    "name": "verifyExistsDataInPage",
                    "args": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { UtilsService } from '../../../helpers/services/utils.service';\r\nimport { BaseComponent } from '../../../shared/classes/baseComponent';\r\nimport { KeyPadButton } from '../../../shared/interfaces/keybutton.interface';\r\nimport { MetaDataColumn } from '../../../shared/interfaces/metacolumn.interface';\r\nimport { UserUseCase } from '../../application/user.usecase';\r\nimport { FormComponent } from '../../components/form/form.component';\r\nimport { UserModel } from '../../domain/user.model';\r\nimport { UserExportDto } from '../../dtos/user-export.dto';\r\n\r\n@Component({\r\n  selector: 'amb-page-list',\r\n  templateUrl: './page-list.component.html',\r\n  styleUrls: ['./page-list.component.css'],\r\n})\r\nexport class PageListComponent extends BaseComponent<UserModel, UserUseCase> {\r\n  data: UserModel[] = [];\r\n  totalRecords: number = 0;\r\n  keypadButtons: KeyPadButton[] = [\r\n    {\r\n      icon: 'cloud_download',\r\n      tooltip: 'DESCARGAR',\r\n      color: 'accent',\r\n      action: 'DOWNLOAD',\r\n    },\r\n    {\r\n      icon: 'add',\r\n      tooltip: 'AGREGAR',\r\n      color: 'primary',\r\n      action: 'NEW',\r\n    },\r\n  ];\r\n\r\n  openForm(row: any): void {\r\n    throw new Error('Method not implemented.');\r\n  }\r\n\r\n  metaDataColumns: MetaDataColumn[] = [\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre' },\r\n    { field: 'correo', title: 'Correo' },\r\n  ];\r\n\r\n  constructor(\r\n    protected user: UserUseCase,\r\n    protected utilsService: UtilsService\r\n  ) {\r\n    super(user, utilsService);\r\n  }\r\n\r\n  doAction(action: string) {\r\n    switch (action) {\r\n      case 'DOWNLOAD':\r\n        const dto = new UserExportDto();\r\n        this.user.list().subscribe((response: UserModel[]) => {\r\n          this.utilsService.showBottomSheet(\r\n            'Lista de usuarios',\r\n            'users',\r\n            response,\r\n            dto\r\n          );\r\n        });\r\n        break;\r\n      case 'NEW':\r\n        //this.openForm();\r\n        break;\r\n    }\r\n  }\r\n}\r\n// info: MedicUserType[] = [];\r\n/*  records: Partial<UserModel>[] = [\r\n    { id: 1, nombre: 'John', correo: 'john@correo.com' },\r\n    { id: 2, nombre: 'Javier', correo: 'javier@correo.com' },\r\n    { id: 3, nombre: 'Carmela', correo: 'carmela@correo.com' },\r\n    { id: 4, nombre: 'Silvia', correo: 'silvia@correo.com' },\r\n    { id: 5, nombre: 'Carlos', correo: 'carlos@correo.com' },\r\n    { id: 6, nombre: 'Pedro', correo: 'pedro@correo.com' },\r\n    { id: 7, nombre: 'Juan', correo: 'juan@correo.com' },\r\n    { id: 8, nombre: 'Rosa', correo: 'rosa@correo.com' },\r\n    { id: 9, nombre: 'Antonio', correo: 'antonio@correo.com' },\r\n    { id: 10, nombre: 'Paul', correo: 'paul@correo.com' },\r\n    { id: 11, nombre: 'Ana', correo: 'ana@correo.com' },\r\n  ];\r\n  totalRecords = this.records.length;\r\n  keypadButtons: KeyPadButton[] = [\r\n    {\r\n      icon: 'cloud_download',\r\n      tooltip: 'DESCARGAR',\r\n      color: 'accent',\r\n      action: 'DOWNLOAD',\r\n    },\r\n    {\r\n      icon: 'add',\r\n      tooltip: 'AGREGAR',\r\n      color: 'primary',\r\n      action: 'NEW',\r\n    },\r\n  ];\r\n\r\n  metaDataColumns: MetaDataColumn[] = [\r\n    { field: 'id', title: 'ID' },\r\n    { field: 'nombre', title: 'Nombre de usuario' },\r\n    { field: 'correo', title: 'Correo' },\r\n  ];\r\n\r\n  constructor(public utilsService: UtilsService) {\r\n    super(utilsService);\r\n    this.changePage(0);\r\n  }\r\n\r\n  doAction(action: string) {\r\n    switch (action) {\r\n      case 'DOWNLOAD':\r\n        const dto = new UserExportDto();\r\n        this.utilsService.showBottomSheet(\r\n          'Lista de usuarios',\r\n          'users',\r\n          this.records,\r\n          dto\r\n        );\r\n        break;\r\n      case 'NEW':\r\n        this.openForm();\r\n        break;\r\n    }\r\n  }\r\n\r\n  openForm(row: any = null) {\r\n    const options = { panelClass: 'panel-container' };\r\n    this.utilsService.showModal(FormComponent, options);\r\n  } */\r\n//}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-list.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "user",
                        "type": "UserUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 42,
                "jsdoctags": [
                    {
                        "name": "user",
                        "type": "UserUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "utilsService",
                        "type": "UtilsService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "BaseComponent",
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "PageListComponent-3",
            "templateData": "<amb-title></amb-title>\r\n<amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <cdev-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\r\n          <button\r\n            mat-icon-button\r\n            color=\"primary\"\r\n            (click)=\"openForm(row)\"\r\n            matTooltip=\"EDITAR\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button\r\n            *roles-allowed=\"['AUDIT']\"\r\n            mat-icon-button\r\n            color=\"accent\"\r\n            (click)=\"delete(row.id)\"\r\n            matTooltip=\"ELIMINAR\"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </cdev-table>\r\n  </perfect-scrollbar>\r\n  <amb-paginator\r\n    (onChangePage)=\"changePage($event)\"\r\n    [length]=\"totalRecords\"\r\n    [currentPage]=\"currentPage\"\r\n  ></amb-paginator>\r\n</amb-container>\r\n<amb-keypad\r\n  [keypadButtons]=\"keypadButtons\"\r\n  (onClick)=\"doAction($event)\"\r\n></amb-keypad>\r\n\r\n<!-- <amb-container>\r\n  <perfect-scrollbar class=\"heightMaxPerfectScrollbar\">\r\n    <cdev-table [data]=\"data\" [metaDataColumns]=\"metaDataColumns\">\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef></th>\r\n        <td mat-cell *matCellDef=\"let row\" class=\"align-right\">\r\n          <button\r\n            mat-icon-button\r\n            color=\"primary\"\r\n            (click)=\"openForm(row)\"\r\n            matTooltip=\"EDITAR\"\r\n          >\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button\r\n            mat-icon-button\r\n            color=\"accent\"\r\n            (click)=\"delete(row.id, row.username)\"\r\n            matTooltip=\"ELIMINAR\"\r\n          >\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n    </cdev-table>\r\n  </perfect-scrollbar>\r\n  <amb-paginator\r\n    (onChangePage)=\"changePage($event)\"\r\n    [length]=\"totalRecords\"\r\n    [currentPage]=\"currentPage\"\r\n  ></amb-paginator>\r\n</amb-container>\r\n<amb-keypad\r\n  [keypadButtons]=\"keypadButtons\"\r\n  (onClick)=\"doAction($event)\"\r\n></amb-keypad> -->\r\n"
        },
        {
            "name": "PageLoginComponent",
            "id": "component-PageLoginComponent-04cd271497e02a08df7c9fa998b43c56",
            "file": "projects/ambulance/src/app/core/pages/page-login/page-login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-login",
            "styleUrls": [
                "./page-login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "auth",
                            "type": "AuthModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ConfigService } from '../../../config/services/config.service';\r\nimport { ConfigLayout } from '../../../config/interfaces/config-layout.interface';\r\nimport { AuthModel } from '../../domain/auth.model';\r\nimport { AuthUseCase } from '../../application/auth.usecase';\r\n\r\n@Component({\r\n  selector: 'amb-page-login',\r\n  templateUrl: './page-login.component.html',\r\n  styleUrls: ['./page-login.component.css'],\r\n})\r\nexport class PageLoginComponent implements OnInit {\r\n  constructor(private config: ConfigService, private authUseCase: AuthUseCase) {\r\n    this.config.configuration = {\r\n      header: { hidden: true },\r\n      menu: { hidden: true },\r\n    };\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngOnDestroy(): void {\r\n    this.config.configuration = {\r\n      header: { hidden: false },\r\n      menu: { hidden: false },\r\n    };\r\n  }\r\n\r\n  login(auth: AuthModel) {\r\n    this.authUseCase.login(auth);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".container {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  background: url(/assets/img/background.png);\r\n}\r\n\r\n.info {\r\n  padding-left: 150px;\r\n}\r\n\r\n.info img {\r\n  max-width: 150px;\r\n}\r\n\r\n.info h2 {\r\n  color: whitesmoke;\r\n  font-size: 42px;\r\n  line-height: 46px;\r\n  text-align: center;\r\n}\r\n\r\n.info mat-icon {\r\n  width: 100px;\r\n  height: 100px;\r\n}\r\n\r\n.login {\r\n  background: white;\r\n}\r\n",
                    "styleUrl": "./page-login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authUseCase",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "config",
                        "type": "ConfigService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authUseCase",
                        "type": "AuthUseCase",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div\r\n  fxLayout\r\n  fxLayout.lt-sm=\"column\"\r\n  class=\"container\"\r\n  fxLayoutAlign=\"space-between\"\r\n>\r\n  <div\r\n    class=\"info\"\r\n    fxFlex=\"1 1 30%\"\r\n    fxLayout=\"column\"\r\n    fxLayoutAlign=\"center center\"\r\n  >\r\n    <mat-icon svgIcon=\"logo\"></mat-icon>\r\n    <h2>Sistema de Historias</h2>\r\n  </div>\r\n\r\n  <div class=\"login\" fxFlex=\"1 1 30%\" fxLayout fxLayoutAlign=\"center center\">\r\n    <amb-login (onLogin)=\"login($event)\"></amb-login>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "PageReportsComponent",
            "id": "component-PageReportsComponent-7c78bf20188f2bf69a68c019c43bae04",
            "file": "projects/ambulance/src/app/dashboard/pages/page-reports/page-reports.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-page-reports",
            "styleUrls": [
                "./page-reports.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./page-reports.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'amb-page-reports',\r\n  templateUrl: './page-reports.component.html',\r\n  styleUrls: ['./page-reports.component.css']\r\n})\r\nexport class PageReportsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-reports.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>page-reports works!</p>\r\n"
        },
        {
            "name": "PaginatorComponent",
            "id": "component-PaginatorComponent-e57531887e217992ef44bdca59b6dd5c",
            "file": "projects/ambulance/src/app/shared/components/paginator/paginator.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-paginator",
            "styleUrls": [
                "./paginator.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./paginator.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentPage",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number"
                },
                {
                    "name": "length",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number"
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangePage",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "arrayPages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "pageSize",
                    "defaultValue": "environment.PAGE_SIZE",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePage",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ThisReceiver } from '@angular/compiler';\r\nimport {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnInit,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatPaginator, PageEvent } from '@angular/material/paginator';\r\nimport { environment } from '../../../../environments/environment';\r\n\r\n@Component({\r\n  selector: 'amb-paginator',\r\n  templateUrl: './paginator.component.html',\r\n  styleUrls: ['./paginator.component.css'],\r\n})\r\nexport class PaginatorComponent implements OnInit {\r\n  @Output() onChangePage: EventEmitter<number> = new EventEmitter<number>();\r\n  @Input() length!: number;\r\n  @Input() currentPage: number = 0;\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n  pageSize = environment.PAGE_SIZE;\r\n  arrayPages: number[] = [];\r\n  // currentPage = 0;\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const quantityPages = Math.ceil(this.length / this.pageSize);\r\n    this.arrayPages = Array(quantityPages)\r\n      .fill(0)\r\n      .map((x, i) => i);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  changePage(event: any) {\r\n    this.currentPage = event.pageIndex ?? event.value;\r\n    console.log(this.currentPage);\r\n    this.paginator.pageIndex = this.currentPage;\r\n    this.onChangePage.emit(this.currentPage);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./paginator.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout fxLayoutAlign=\"end center\" fxLayoutGap=\"15px\">\r\n  <mat-paginator\r\n    [length]=\"length\"\r\n    [pageSize]=\"pageSize\"\r\n    (page)=\"changePage($event)\"\r\n    showFirstLastButtons=\"true\"\r\n    [pageIndex]=\"currentPage\"\r\n  >\r\n  </mat-paginator>\r\n\r\n  <mat-select\r\n    fxFlex=\"1 1 80px\"\r\n    [(value)]=\"currentPage\"\r\n    (selectionChange)=\"changePage($event)\"\r\n  >\r\n    <mat-option [value]=\"el\" *ngFor=\"let el of arrayPages\"\r\n      >Página {{ el + 1 }}</mat-option\r\n    >\r\n  </mat-select>\r\n</div>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-4a3323b7f62308c7db1661d05e831469",
            "file": "projects/ambulance/src/app/shared/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-table",
            "styleUrls": [
                "./table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "any"
                },
                {
                    "name": "metaDataColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "MetaDataColumn[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "columnsDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<MatColumnDef>",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "MatColumnDef, {descendants: true}"
                        }
                    ]
                },
                {
                    "name": "listFields",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<any>",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  Input,\r\n  OnInit,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { MatColumnDef, MatTable } from '@angular/material/table';\r\nimport { MetaDataColumn } from '../../interfaces/metacolumn.interface';\r\n\r\ninterface IData {\r\n  id: number;\r\n  name: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'amb-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.css'],\r\n})\r\nexport class TableComponent implements OnInit {\r\n  @Input() data: any;\r\n  @Input() metaDataColumns!: MetaDataColumn[];\r\n  listFields: string[] = [];\r\n  @ContentChildren(MatColumnDef, { descendants: true })\r\n  columnsDef!: QueryList<MatColumnDef>;\r\n  @ViewChild(MatTable, { static: true }) table!: MatTable<any>;\r\n\r\n  constructor() {}\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.metaDataColumns) {\r\n      this.listFields = this.metaDataColumns.map((x) => x.field);\r\n    }\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterContentInit() {\r\n    if (!this.columnsDef) {\r\n      return;\r\n    }\r\n    this.columnsDef.forEach((columnDef) => {\r\n      this.listFields.push(columnDef.name);\r\n      this.table?.addColumnDef(columnDef);\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".highline:hover {\r\n  background-color: rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.head th {\r\n  font-size: 20px;\r\n}\r\n",
                    "styleUrl": "./table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div fxLayout=\"column\">\r\n  <ng-content></ng-content>\r\n  <table mat-table [dataSource]=\"data\">\r\n    <ng-container\r\n      [matColumnDef]=\"metadata.field\"\r\n      *ngFor=\"let metadata of metaDataColumns\"\r\n    >\r\n      <th mat-header-cell *matHeaderCellDef>{{ metadata.title }}</th>\r\n      <td mat-cell *matCellDef=\"let row\">{{ row[metadata.field] }}</td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"listFields; sticky: true\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: listFields\" class=\"highline\"></tr>\r\n  </table>\r\n</div>\r\n"
        },
        {
            "name": "TitleComponent",
            "id": "component-TitleComponent-aa977e327bdd9d5cbbcaa9daf6ed85fb",
            "file": "projects/ambulance/src/app/shared/components/title/title.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "amb-title",
            "styleUrls": [
                "./title.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./title.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "path",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenu",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { IMenu, MenuService } from '../../../helpers/services/menu.service';\r\n\r\n@Component({\r\n  selector: 'amb-title',\r\n  templateUrl: './title.component.html',\r\n  styleUrls: ['./title.component.css'],\r\n})\r\nexport class TitleComponent implements OnInit {\r\n  path: IMenu;\r\n\r\n  constructor(\r\n    private menuService: MenuService,\r\n    private activatedRoute: ActivatedRoute\r\n  ) {\r\n    const currentPath =\r\n      '/' + this.activatedRoute.snapshot.pathFromRoot[1].routeConfig?.path;\r\n    this.path = this.menuService.getMenuByUrl(currentPath);\r\n    console.log('path', this.path);\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "mat-toolbar {\r\n  background-color: #039be5 !important;\r\n  height: 80px;\r\n}\r\n\r\nh2 {\r\n  font-size: 25px;\r\n  color: white !important;\r\n  line-height: 80px;\r\n}\r\n\r\nmat-icon {\r\n  font-size: 34px;\r\n  width: 34px;\r\n  height: 34px;\r\n  color: white;\r\n}\r\n",
                    "styleUrl": "./title.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "menuService",
                        "type": "MenuService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "activatedRoute",
                        "type": "ActivatedRoute",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-toolbar fxLayout fxLayoutGap=\"10px\">\r\n  <mat-icon [svgIcon]=\"path.icon\"></mat-icon>\r\n  <h2>{{ path.title }}</h2>\r\n</mat-toolbar>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-09a9022dcfb4712c0e043a54d1687779",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppComponent } from './app.component';\r\nimport { CoreModule } from './core/core.module';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatPaginatorIntl } from '@angular/material/paginator';\r\nimport { Paginator } from './shared/classes/paginator';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { ConfigModule } from './config/modules/config.module';\r\nimport { configLayout } from './config/constants/config.constant';\r\nimport { IconService } from './helpers/services/icon.service';\r\nimport { AuthInfraestructure } from './core/infraestructure/auth.infraestructure';\r\nimport { AuthRepository } from './core/application/auth.repository';\r\nimport { AuthUseCase } from './core/application/auth.usecase';\r\nimport { StorageInfraestructure } from './core/infraestructure/storage.infraestructure';\r\nimport { StorageRepository } from './core/application/storage.repository';\r\nimport { MedicInfraestructure } from './medics/infraestructure/medic.infraestructure';\r\nimport { MedicRepository } from './medics/application/medic.repostiory';\r\nimport { DriverRepository } from './drivers/application/driver.repository';\r\nimport { DriverInfraestructure } from './drivers/infraestructure/driver.infraestructure';\r\nimport { TokenInterceptor } from './shared/interceptors/token.interceptor';\r\nimport { UserRepository } from './users/application/user.repository';\r\nimport { UserInfraestructure } from './users/infraestructure/user.infraestructure';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    CoreModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatSidenavModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    MatBottomSheetModule,\r\n    HttpClientModule,\r\n    ConfigModule.forRoot(configLayout),\r\n  ],\r\n  providers: [\r\n    { provide: MatPaginatorIntl, useClass: Paginator },\r\n    { provide: AuthRepository, useClass: AuthInfraestructure },\r\n    { provide: MedicRepository, useClass: MedicInfraestructure },\r\n    { provide: DriverRepository, useClass: DriverInfraestructure },\r\n    { provide: UserRepository, useClass: UserInfraestructure },\r\n    { provide: StorageRepository, useClass: StorageInfraestructure },\r\n    { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true },\r\n    AuthUseCase,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {\r\n  constructor(private iconService: IconService) {}\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthUseCase"
                        },
                        {
                            "name": "TokenInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "ConfigModule"
                        },
                        {
                            "name": "CoreModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-30103058cdd27b1e4c1e2377af39e0b3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport {\r\n  NoPreloading,\r\n  PreloadAllModules,\r\n  RouterModule,\r\n  Routes,\r\n} from '@angular/router';\r\nimport { PageLoginComponent } from './core/pages/page-login/page-login.component';\r\nimport { PageReportsComponent } from './dashboard/pages/page-reports/page-reports.component';\r\nimport { AuthenticationGuard } from './shared/guards/authentication.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: PageLoginComponent },\r\n  {\r\n    path: 'dashboard',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./dashboard/dashboard.module').then((m) => m.DashboardModule)\",\r\n  },\r\n  {\r\n    path: 'histories',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./histories/histories.module').then((m) => m.HistoriesModule)\",\r\n  },\r\n  {\r\n    path: 'medics',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./medics/medics.module').then((m) => m.MedicsModule)\",\r\n  },\r\n  {\r\n    path: 'drivers',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./drivers/drivers.module').then((m) => m.DriversModule)\",\r\n  },\r\n  {\r\n    path: 'users',\r\n    canLoad: [AuthenticationGuard],\r\n    loadChildren: () =>\r\n      \"import('./users/users.module').then((m) => m.UsersModule)\",\r\n  },\r\n  { path: '**', redirectTo: '' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forRoot(routes, {\r\n      preloadingStrategy: PreloadAllModules,\r\n    }),\r\n  ],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CdevTableModule",
            "id": "module-CdevTableModule-fd6dcdc247ab3fce48a857ff5c019843",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/cdev-table/src/lib/cdev-table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { CdevTableComponent } from './cdev-table.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\n\r\n@NgModule({\r\n  declarations: [CdevTableComponent],\r\n  imports: [MatTableModule, CommonModule, FlexLayoutModule],\r\n  exports: [CdevTableComponent],\r\n})\r\nexport class CdevTableModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CdevTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CdevTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ConfigModule",
            "id": "module-ConfigModule-fe6d667fb8193548a902f0b9a573695b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/config/modules/config.module.ts",
            "methods": [
                {
                    "name": "forRoot",
                    "args": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ModuleWithProviders<ConfigModule>",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        124
                    ],
                    "jsdoctags": [
                        {
                            "name": "config",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "sourceCode": "import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CONFIG_TOKEN } from '../tokens';\r\n\r\n@NgModule()\r\nexport class ConfigModule {\r\n  static forRoot(config: any): ModuleWithProviders<ConfigModule> {\r\n    const module = {\r\n      ngModule: ConfigModule,\r\n      providers: [\r\n        {\r\n          provide: CONFIG_TOKEN,\r\n          useValue: config,\r\n        },\r\n      ],\r\n    };\r\n\r\n    return module;\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-5c50c12164184ae48f2c07a4dc868b3e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { PageLoginComponent } from './pages/page-login/page-login.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MenuComponent } from './components/menu/menu.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport {\r\n  RecaptchaModule,\r\n  RecaptchaFormsModule,\r\n  RecaptchaSettings,\r\n  RECAPTCHA_SETTINGS,\r\n} from 'ng-recaptcha';\r\nimport { environment } from '../../environments/environment';\r\n\r\nconst RECAPTCHA_V2_DUMMY_KEY = environment.keyRecaptcha;\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    FlexLayoutModule,\r\n    MatIconModule,\r\n    MatToolbarModule,\r\n    MatMenuModule,\r\n    MatListModule,\r\n    RouterModule,\r\n    ReactiveFormsModule,\r\n    RecaptchaModule,\r\n    RecaptchaFormsModule,\r\n  ],\r\n  declarations: [\r\n    PageLoginComponent,\r\n    LoginComponent,\r\n    HeaderComponent,\r\n    MenuComponent,\r\n  ],\r\n  exports: [\r\n    PageLoginComponent,\r\n    HeaderComponent,\r\n    MenuComponent,\r\n    MatIconModule,\r\n    FlexLayoutModule,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: RECAPTCHA_SETTINGS,\r\n      useValue: {\r\n        siteKey: RECAPTCHA_V2_DUMMY_KEY,\r\n      } as RecaptchaSettings,\r\n    },\r\n  ],\r\n})\r\nexport class CoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "PageLoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MenuComponent"
                        },
                        {
                            "name": "PageLoginComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-64490931e6358d30079cdcb7f2275573",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PageReportsComponent } from './pages/page-reports/page-reports.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [PageReportsComponent],\r\n  imports: [CommonModule, SharedModule],\r\n})\r\nexport class DashboardModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageReportsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardRoutingModule",
            "id": "module-DashboardRoutingModule-0dc46d5280dcfdeb62f222659b8bb70f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/dashboard/dashboard-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { PageReportsComponent } from './pages/page-reports/page-reports.component';\r\n\r\nconst routes: Routes = [{ path: '', component: PageReportsComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n})\r\nexport class DashboardRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriversModule",
            "id": "module-DriversModule-963f993bec335d208cea9c93cd417dfe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/drivers/drivers.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DriversRoutingModule } from './drivers-routing.module';\r\nimport { PageListComponent } from './pages/page-list/page-list.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [PageListComponent],\r\n  imports: [CommonModule, DriversRoutingModule, SharedModule],\r\n})\r\nexport class DriversModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "PageListComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "DriversRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DriversRoutingModule",
            "id": "module-DriversRoutingModule-61cc749b130c1f51e15788b83c31bc70",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/drivers/drivers-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageListComponent } from './pages/page-list/page-list.component';\r\n\r\nconst routes: Routes = [{ path: '', component: PageListComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class DriversRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoriesModule",
            "id": "module-HistoriesModule-ad3bf8b153fd77ca3a07656e69d1be95",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/histories/histories.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HistoriesRoutingModule } from './histories-routing.module';\r\nimport { PageListComponent } from './pages/page-list/page-list.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [PageListComponent],\r\n  imports: [CommonModule, HistoriesRoutingModule, SharedModule],\r\n})\r\nexport class HistoriesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "HistoriesRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HistoriesRoutingModule",
            "id": "module-HistoriesRoutingModule-6bed9a494f134fd294c539eba9022983",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/histories/histories-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageListComponent } from './pages/page-list/page-list.component';\r\n\r\nconst routes: Routes = [{ path: '', component: PageListComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class HistoriesRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicsModule",
            "id": "module-MedicsModule-daaa8bada519706900736956d4851fe1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/medics/medics.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MedicsRoutingModule } from './medics-routing.module';\r\nimport { PageListComponent } from './pages/page-list/page-list.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [PageListComponent],\r\n  imports: [CommonModule, MedicsRoutingModule, SharedModule],\r\n})\r\nexport class MedicsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MedicsRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MedicsRoutingModule",
            "id": "module-MedicsRoutingModule-1cdbb478f60b9220e9bf714a262a4c22",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/medics/medics-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AuthorizationGuard } from '../shared/guards/authorization.guard';\r\nimport { PageListComponent } from './pages/page-list/page-list.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PageListComponent,\r\n    canActivate: [AuthorizationGuard],\r\n    data: { rolesAllowed: ['MEDIC', 'OPERATOR'] },\r\n  },\r\n];\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class MedicsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-a399dc75bca0b4efafd8aeca5c61795b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ContainerComponent } from './components/container/container.component';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { TableComponent } from './components/table/table.component';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport {\r\n  PerfectScrollbarConfigInterface,\r\n  PerfectScrollbarModule,\r\n  PERFECT_SCROLLBAR_CONFIG,\r\n} from 'ngx-perfect-scrollbar';\r\nimport { PaginatorComponent } from './components/paginator/paginator.component';\r\nimport { KeypadComponent } from './components/keypad/keypad.component';\r\nimport { ConfirmComponent } from './components/confirm/confirm.component';\r\nimport { DownloadComponent } from './components/download/download.component';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { CdevTableModule } from 'cdev-table';\r\nimport { TitleComponent } from './components/title/title.component';\r\nimport { RolesAllowedDirective } from './directives/roles-allowed.directive';\r\n\r\nconst DEFAULT_PERFECT_SCROLLBAR_CONFIG: PerfectScrollbarConfigInterface = {\r\n  suppressScrollX: true,\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TitleComponent,\r\n    ContainerComponent,\r\n    TableComponent,\r\n    PaginatorComponent,\r\n    KeypadComponent,\r\n    ConfirmComponent,\r\n    DownloadComponent,\r\n    RolesAllowedDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    FlexLayoutModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    MatDialogModule,\r\n    MatListModule,\r\n  ],\r\n  exports: [\r\n    TitleComponent,\r\n    ContainerComponent,\r\n    TableComponent,\r\n    PerfectScrollbarModule,\r\n    PaginatorComponent,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatCheckboxModule,\r\n    MatTooltipModule,\r\n    KeypadComponent,\r\n    ConfirmComponent,\r\n    MatDialogModule,\r\n    CdevTableModule,\r\n    RolesAllowedDirective,\r\n  ],\r\n  providers: [\r\n    {\r\n      provide: PERFECT_SCROLLBAR_CONFIG,\r\n      useValue: DEFAULT_PERFECT_SCROLLBAR_CONFIG,\r\n    },\r\n  ],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ConfirmComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "DownloadComponent"
                        },
                        {
                            "name": "KeypadComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "CdevTableModule"
                        },
                        {
                            "name": "ConfirmComponent"
                        },
                        {
                            "name": "ContainerComponent"
                        },
                        {
                            "name": "KeypadComponent"
                        },
                        {
                            "name": "PaginatorComponent"
                        },
                        {
                            "name": "RolesAllowedDirective"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TitleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersModule",
            "id": "module-UsersModule-05facb4729f846f71809bab787c6cb6a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/users/users.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { UsersRoutingModule } from './users-routing.module';\r\nimport { PageListComponent } from './pages/page-list/page-list.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { FormComponent } from './components/form/form.component';\r\n\r\n@NgModule({\r\n  declarations: [PageListComponent, FormComponent],\r\n  imports: [CommonModule, UsersRoutingModule, SharedModule],\r\n})\r\nexport class UsersModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "UsersRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UsersRoutingModule",
            "id": "module-UsersRoutingModule-fade0ee17d07f61292afd7c49d6845fc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/ambulance/src/app/users/users-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageListComponent } from './pages/page-list/page-list.component';\r\n\r\nconst routes: Routes = [{ path: '', component: PageListComponent }];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class UsersRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "CONFIG_TOKEN",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/app/config/tokens/index.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new InjectionToken('tokenLayout')"
            },
            {
                "name": "configLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/app/config/constants/config.constant.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ConfigLayout",
                "defaultValue": "{\r\n  header: {\r\n    hidden: false,\r\n  },\r\n  menu: {\r\n    hidden: false,\r\n  },\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/cdev-table/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/app/shared/shared.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "PerfectScrollbarConfigInterface",
                "defaultValue": "{\r\n  suppressScrollX: true,\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  PAGE_SIZE: 10,\r\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\r\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/environments/environment.qas.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  PAGE_SIZE: 10,\r\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\r\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  PAGE_SIZE: 10,\r\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\r\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "pdfFonts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('pdfmake/build/vfs_fonts.js')"
            },
            {
                "name": "pdfMake",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require('pdfmake/build/pdfmake.js')"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RECAPTCHA_V2_DUMMY_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/app/core/core.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "environment.keyRecaptcha"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/cdev-table/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "any"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CdevTableComponent>",
                "defaultValue": "(args: CdevTableComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "MedicUserType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "MedicModel | UserModel",
                "file": "projects/ambulance/src/app/shared/types/medic-user.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 185
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/ambulance/src/app/config/tokens/index.ts": [
                {
                    "name": "CONFIG_TOKEN",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/app/config/tokens/index.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new InjectionToken('tokenLayout')"
                }
            ],
            "projects/ambulance/src/app/config/constants/config.constant.ts": [
                {
                    "name": "configLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/app/config/constants/config.constant.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ConfigLayout",
                    "defaultValue": "{\r\n  header: {\r\n    hidden: false,\r\n  },\r\n  menu: {\r\n    hidden: false,\r\n  },\r\n}"
                }
            ],
            "projects/ambulance/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/cdev-table/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/cdev-table/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/cdev-table/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "projects/ambulance/src/app/shared/shared.module.ts": [
                {
                    "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/app/shared/shared.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "PerfectScrollbarConfigInterface",
                    "defaultValue": "{\r\n  suppressScrollX: true,\r\n}"
                }
            ],
            "projects/ambulance/src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  PAGE_SIZE: 10,\r\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\r\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\r\n}"
                }
            ],
            "projects/ambulance/src/environments/environment.qas.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/environments/environment.qas.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  PAGE_SIZE: 10,\r\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\r\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\r\n}"
                }
            ],
            "projects/ambulance/src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  PAGE_SIZE: 10,\r\n  API_URL: 'https://api-cursoangular.cursos-dev.com',\r\n  keyRecaptcha: '6LcqVe8cAAAAAFKrdDeUow8MCAXl4XGMsm7XbS-T',\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "stories/Table.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CdevTableComponent>",
                    "defaultValue": "(args: CdevTableComponent) => ({\n  props: args,\n})"
                }
            ],
            "projects/ambulance/src/app/shared/components/download/download.component.ts": [
                {
                    "name": "pdfFonts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('pdfmake/build/vfs_fonts.js')"
                },
                {
                    "name": "pdfMake",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require('pdfmake/build/pdfmake.js')"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any"
                }
            ],
            "projects/ambulance/src/app/core/core.module.ts": [
                {
                    "name": "RECAPTCHA_V2_DUMMY_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/ambulance/src/app/core/core.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "environment.keyRecaptcha"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/ambulance/src/app/shared/types/medic-user.type.ts": [
                {
                    "name": "MedicUserType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "MedicModel | UserModel",
                    "file": "projects/ambulance/src/app/shared/types/medic-user.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 185
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "projects/ambulance/src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "PageLoginComponent"
                    },
                    {
                        "path": "dashboard",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./dashboard/dashboard.module#DashboardModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "DashboardModule"
                            }
                        ]
                    },
                    {
                        "path": "histories",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./histories/histories.module#HistoriesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/ambulance/src/app/histories/histories-routing.module.ts",
                                        "module": "HistoriesRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageListComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HistoriesModule"
                            }
                        ]
                    },
                    {
                        "path": "medics",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./medics/medics.module#MedicsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/ambulance/src/app/medics/medics-routing.module.ts",
                                        "module": "MedicsRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageListComponent",
                                                "canActivate": [
                                                    "AuthorizationGuard"
                                                ],
                                                "data": {
                                                    "rolesAllowed": [
                                                        "MEDIC",
                                                        "OPERATOR"
                                                    ]
                                                }
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MedicsModule"
                            }
                        ]
                    },
                    {
                        "path": "drivers",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./drivers/drivers.module#DriversModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/ambulance/src/app/drivers/drivers-routing.module.ts",
                                        "module": "DriversRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageListComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DriversModule"
                            }
                        ]
                    },
                    {
                        "path": "users",
                        "canLoad": [
                            "AuthenticationGuard"
                        ],
                        "loadChildren": "./users/users.module#UsersModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "projects/ambulance/src/app/users/users-routing.module.ts",
                                        "module": "UsersRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PageListComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UsersModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "redirectTo": ""
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/ambulance/src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/config/constants/config.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/config/interfaces/config-layout.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfigLayout",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/config/services/config.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ConfigService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/config/tokens/index.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CONFIG_TOKEN",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/application/auth.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AuthRepository",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/application/auth.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/application/storage.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StorageRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/components/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/core.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RECAPTCHA_V2_DUMMY_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/domain/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthModel",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/infraestructure/auth.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/infraestructure/storage.infraestructure.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StorageInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/infraestructure/storage.infraestructure.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPayload",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/core/pages/page-login/page-login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageLoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/dashboard/pages/page-reports/page-reports.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageReportsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/drivers/application/driver.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DriverRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/drivers/application/driver.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/drivers/domain/driver.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DriverModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/drivers/dtos/driver-export.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DriverExportDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/drivers/dtos/driver-export.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDtoExportDriver",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/drivers/infraestructure/driver.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "DriverInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/drivers/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/helpers/interfaces/tokens.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Tokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/helpers/services/icon.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "IconService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/helpers/services/icon.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IIcon",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/helpers/services/menu.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MenuService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/helpers/services/menu.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenu",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/helpers/services/utils.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UtilsService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/histories/domain/history.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "HistoryModel",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/histories/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/medics/application/medic.repostiory.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MedicRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/medics/application/medic.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/medics/domain/medic.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MedicModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/medics/dtos/medic-export.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "MedicExportDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/medics/dtos/medic-export.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDtoExportMedic",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/medics/infraestructure/medic.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MedicInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/medics/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/classes/baseComponent.ts",
                "type": "class",
                "linktype": "classe",
                "name": "BaseComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/classes/paginator.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "Paginator",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/confirm/confirm.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/container/container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DownloadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfFonts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "pdfMake",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/download/download.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/keypad/keypad.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "KeypadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/table/table.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/components/title/title.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TitleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/directives/roles-allowed.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "RolesAllowedDirective",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/guards/authentication.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthenticationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/guards/authorization.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthorizationGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/interceptors/token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "TokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/interfaces/dto-export.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DtoExport",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/interfaces/keybutton.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "KeyPadButton",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/interfaces/metacolumn.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaDataColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/interfaces/option-export.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "OptionsExport",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/interfaces/page.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Page",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/interfaces/usecase.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UseCase",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/shared/shared.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DEFAULT_PERFECT_SCROLLBAR_CONFIG",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/users/application/user.repository.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserRepository",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/users/application/user.usecase.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserUseCase",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/users/components/form/form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/users/domain/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/users/dtos/user-export.dto.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UserExportDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/users/dtos/user-export.dto.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDtoExportUser",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/users/infraestructure/user.infraestructure.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserInfraestructure",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/app/users/pages/page-list/page-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/environments/environment.qas.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/ambulance/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/cdev-table/src/lib/cdev-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CdevTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/cdev-table/src/lib/metacolumn.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetaDataColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/cdev-table/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/cdev-table/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}